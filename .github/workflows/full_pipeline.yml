name: Full Crime Pipeline (SF+FR)

on:
  schedule:
    - cron: "0 14,15 * * *"   # SF 07:00: 14:00 UTC (yaz), 15:00 UTC (kış)
  workflow_dispatch:
    inputs:
      persist:
        description: "Sonuçları nasıl saklayalım?"
        type: choice
        options: [artifact, release, commit, none]
        default: artifact
      force:
        description: "Manuel tetiklemede 07:00 kapısını YOK SAY"
        type: boolean
        default: true
      top_k:
        description: "Stacking: her saat dilimi için önerilecek GEOID sayısı"
        default: "50"
      variant:
        description: "Pipeline varyantı (default | fr)"
        type: choice
        options: [default, fr]
        default: fr

permissions:
  actions: read
  contents: write

concurrency:
  group: full-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  CRIME_DATA_DIR: crime_prediction_data
  GEOID_LEN: "11"

  BACKFILL_DAYS: "0"
  SF_SODA_FETCH_STRATEGY: ${{ vars.SF_SODA_FETCH_STRATEGY || 'bulk' }}
  SF_SODA_PAGE_LIMIT:    ${{ vars.SF_SODA_PAGE_LIMIT    || '50000' }}
  SF_SODA_MAX_PAGES:     ${{ vars.SF_SODA_MAX_PAGES     || '100' }}

  SF911_API_URL:       ${{ vars.SF911_API_URL       || 'https://data.sfgov.org/resource/2zdj-bwza.json' }}
  SF911_AGENCY_FILTER: ${{ vars.SF911_AGENCY_FILTER || 'agency like "%Police%"' }}
  SF911_API_TOKEN:     ${{ secrets.SF911_API_TOKEN }}
  SOCS_APP_TOKEN:      ${{ secrets.SOCS_APP_TOKEN }}

  PATROL_TOP_K: ${{ github.event.inputs.top_k || '50' }}

  PATROL_HORIZON_DAYS: "3"
  WX_LOCATION: "san francisco"
  WX_UNIT: "us"

  ACS_YEAR: ${{ vars.ACS_YEAR || 'LATEST' }}
  DEMOG_WHITELIST: ${{ vars.DEMOG_WHITELIST || '' }}
  CENSUS_GEO_LEVEL: ${{ vars.CENSUS_GEO_LEVEL || 'auto' }}
  PIPELINE_VARIANT: ${{ github.event.inputs.variant || vars.PIPELINE_VARIANT || 'fr' }}

  # >>> FR çıktılarını saklama modu (schedule tetiklerinde de çalışsın)
  PERSIST_MODE: ${{ github.event.inputs.persist || 'artifact' }}
  # <<<

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS objects
        run: |
          git lfs install
          git lfs pull
          echo "Repo root:"; ls -lah
          echo "crime_prediction_data:"; ls -lah crime_prediction_data || true
          echo "CRIME_DATA_DIR:"; ls -lah "${CRIME_DATA_DIR}" || true

      - name: Ensure data dir
        run: mkdir -p "${CRIME_DATA_DIR}"

      # --- SF 07:00 kapısı (TZ ayarla + saat kontrolü) ---
      - name: Set runner timezone to America/Los_Angeles
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "America/Los_Angeles"

      - name: Gate by local SF time == 07 (bypassable)
        id: gate
        run: |
          now="$(date)"
          echo "Runner local time: $now"
          echo "RUN_LOCAL_TIME=$now" >> $GITHUB_ENV
          # Manuel + force=true ise doğrudan geç
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Aksi halde 07:00 kontrolü
          if [ "$(date +%H)" = "07" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug variant
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          echo "PIPELINE_VARIANT=${PIPELINE_VARIANT}"

      - name: Skip summary (outside 07:00 and not forced)
        if: ${{ steps.gate.outputs.proceed != 'true' }}
        run: |
          {
            echo "## SF Crime Pipeline"
            echo ""
            echo "- Çalışma zamanı (SF): **$(date)**"
            echo "- Not: 07:00 kapısı nedeniyle adımlar atlandı. Manuel tetiklerken \`force=true\` verin."
          } >> $GITHUB_STEP_SUMMARY

      - name: System deps for rtree (optional)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: sudo apt-get update && sudo apt-get install -y libspatialindex-dev

      - name: Set up Python 3.11
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          python -m pip install -U pip wheel setuptools
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -U "geopandas==1.0.1" "shapely==2.0.4" "pyproj==3.6.1" "pyogrio==0.9.0" "rtree==1.3.0"

      - name: Geo stack smoke test
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          python - <<'PY'
          import geopandas, shapely, pyproj, pyogrio, pandas
          print("geopandas", geopandas.__version__)
          print("shapely", shapely.__version__)
          print("pyproj", pyproj.__version__)
          print("pyogrio", pyogrio.__version__)
          print("pandas", pandas.__version__)
          PY

      # >>> Prefetch sf_crime_y.csv
      - name: 00) Prefetch sf_crime_y.csv from previous successful run (artifact)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          ARTIFACT_NAME: sf-crime-pipeline-output
          WORKFLOW_NAME: Full Crime Pipeline (SF+FR)
          TARGET_FILE: sf_crime_y.csv
          OUT_DIR: crime_prediction_data
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ -f "${OUT_DIR}/${TARGET_FILE}" ]; then
            echo "ℹ️ ${OUT_DIR}/${TARGET_FILE} zaten var, indirme atlandı."
            exit 0
          fi
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y unzip >/dev/null
          if ! command -v gh >/dev/null; then
            type -p curl >/dev/null && sudo curl -sSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh
          fi
          mkdir -p _prev
          FOUND=""
          RUNS=$(gh run list -R "${GITHUB_REPOSITORY}" --workflow "${WORKFLOW_NAME}" --status success -L 10 --json databaseId -q '.[].databaseId' || true)
          for RID in ${RUNS}; do
            rm -rf "_prev/$RID" && mkdir -p "_prev/$RID"
            if gh run download -R "${GITHUB_REPOSITORY}" "$RID" -n "${ARTIFACT_NAME}" -D "_prev/$RID" >/dev/null 2>&1; then
              F=$(find "_prev/$RID" -type f -iname "${TARGET_FILE}" | head -n1 || true)
              if [ -n "${F:-}" ]; then
                cp -f "$F" "${OUT_DIR}/${TARGET_FILE}"
                echo "✅ Bulundu ve kopyalandı: $F → ${OUT_DIR}/${TARGET_FILE}"
                FOUND="yes"; break
              fi
            fi
          done
          if [ -z "${FOUND}" ]; then
            echo "ℹ️ ${TARGET_FILE} geçmiş artifact’larda bulunamadı; release fallback devreye girebilir."
          fi
      # <<<

      # ---- PIPELINE ----
      - name: 01) Suç tabanı ve grid → sf_crime.csv + gridler
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          Y_CSV_NAME: ${{ env.CRIME_DATA_DIR }}/sf_crime_y.csv
          CACHE_WRITE_Y_ONLY: "1"
        run: |
          set -e
          PY="update_crime.py"
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_crime.fr.py" ]; then PY="update_crime.fr.py";
            elif [ -f "update_crime_fr.py" ]; then PY="update_crime_fr.py"; fi
          fi
          python -u "$PY"

      - name: 01.1) GEOID+Y_label → sf_crime_L.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          GEOID_LEN: ${{ env.GEOID_LEN }}
          AGGR_Y_THRESHOLD: ${{ env.AGGR_Y_THRESHOLD || '1' }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pandas as pd, re
          cdir = os.environ["CRIME_DATA_DIR"]
          L = int(os.environ.get("GEOID_LEN","11"))
          TH = int(os.environ.get("AGGR_Y_THRESHOLD","1"))

          def norm_geoid(s):
              return s.astype(str).str.extract(r"(\d+)", expand=False).str[:L].str.zfill(L)

          # 1) Tercih: GRID dosyası (Y_label burada var)
          grid_candidates = [
              "sf_crime_grid_full_labeled.csv",
              os.path.join(cdir, "sf_crime_grid_full_labeled.csv"),
          ]
          grid_src = next((p for p in grid_candidates if os.path.isfile(p)), None)

          if grid_src:
              df = pd.read_csv(grid_src, low_memory=False)
              if not {"GEOID","Y_label"}.issubset(df.columns):
                  raise SystemExit(f"GRID var ama beklenen kolonlar yok: {list(df.columns)}")
              out = df[["GEOID","Y_label"]].copy()
              out["GEOID"] = norm_geoid(out["GEOID"])
              # GEOID başına en az bir kez 1 görülmüşse 1
              out = out.groupby("GEOID", as_index=False)["Y_label"].max()
          else:
              # 2) Fallback: event-level (Y_label yok) → GEOID görüldüyse 1
              for name in ("sf_crime_y.csv", "sf_crime.csv"):
                  src = os.path.join(cdir, name)
                  if os.path.isfile(src):
                      break
              else:
                  raise SystemExit("Girdi yok: sf_crime_grid_full_labeled.csv ya da sf_crime_y.csv / sf_crime.csv bulunamadı.")

              df = pd.read_csv(src, low_memory=False)
              low = {c.lower(): c for c in df.columns}
              geoid_col = low.get("geoid") or low.get("geography_id") or low.get("geoid11") or low.get("geoid_11")
              if not geoid_col:
                  raise SystemExit(f"GEOID kolonu bulunamadı. Kolonlar: {list(df.columns)}")

              g = df[[geoid_col]].copy()
              g.columns = ["GEOID"]
              g["GEOID"] = norm_geoid(g["GEOID"])
              # GEOID en az bir kez geçtiyse 1, hiç geçmediyse 0
              out = g.dropna().drop_duplicates()
              out["Y_label"] = 1

          dest = os.path.join(cdir, "sf_crime_L.csv")
          out.to_csv(dest, index=False)
          print("Yazıldı:", dest, "satır:", len(out))
          PY

          echo "---- sf_crime_L.csv (head) ----"
          head -n 5 "${CRIME_DATA_DIR}/sf_crime_L.csv" || true

      - name: Restore 911 summary cache
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.CRIME_DATA_DIR }}/sf_911_last_5_year.csv
          key: 911-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            911-${{ runner.os }}-

      - name: Prefetch sf_911_last_5_year_y.csv from previous successful run (artifact)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          ARTIFACT_NAME: sf-crime-pipeline-output
          WORKFLOW_NAME: Full Crime Pipeline (SF+FR)
          TARGET_FILE: sf_911_last_5_year_y.csv
          OUT_DIR: crime_prediction_data
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ -f "${OUT_DIR}/${TARGET_FILE}" ]; then
            echo "ℹ️ ${OUT_DIR}/${TARGET_FILE} zaten var, indirme atlandı."
            exit 0
          fi
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y unzip >/dev/null
          if ! command -v gh >/dev/null; then
            type -p curl >/dev/null && sudo curl -sSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh
          fi
          mkdir -p _prev
          FOUND=""
          for RID in $(gh run list -R "${GITHUB_REPOSITORY}" --workflow "${WORKFLOW_NAME}" --status success -L 10 --json databaseId -q '.[].databaseId'); do
            rm -rf "_prev/$RID" && mkdir -p "_prev/$RID"
            if gh run download -R "${GITHUB_REPOSITORY}" "$RID" -n "${ARTIFACT_NAME}" -D "_prev/$RID" >/dev/null 2>&1; then
              F=$(find "_prev/$RID" -type f -iname "${TARGET_FILE}" | head -n1 || true)
              if [ -n "${F:-}" ]; then
                cp -f "$F" "${OUT_DIR}/${TARGET_FILE}"
                echo "✅ Bulundu ve kopyalandı: $F → ${OUT_DIR}/${TARGET_FILE}"
                FOUND="yes"; break
              fi
            fi
          done
          if [ -z "${FOUND}" ]; then
            echo "ℹ️ ${TARGET_FILE} önceki artifact’larda bulunamadı; script release fallback kullanacak."
          fi

      - name: 02) 911 → sf_crime_01.csv (bulk 50k)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SF911_API_URL:         ${{ env.SF911_API_URL }}
          SF911_AGENCY_FILTER:   ${{ env.SF911_AGENCY_FILTER }}
          SF911_API_TOKEN:       ${{ env.SF911_API_TOKEN }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
        run: |
          set -e
          PY="update_911.py"
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_911.fr.py" ]; then PY="update_911.fr.py";
            elif [ -f "update_911_fr.py" ]; then PY="update_911_fr.py"; fi
          fi
          python -u "$PY"

      - name: FR 01) 911 → fr_crime_01.csv
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' ||
              hashFiles('**/update_911.fr.py', '**/update_911_fr.py', 'scripts/update_911.fr.py', 'scripts/update_911_fr.py') != '') }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SF911_API_URL:         ${{ env.SF911_API_URL }}
          SF911_AGENCY_FILTER:   ${{ env.SF911_AGENCY_FILTER }}
          SF911_API_TOKEN:       ${{ env.SF911_API_TOKEN }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
          CRIME_DATA_DIR:        ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_911.fr.py" ]; then PY="update_911.fr.py";
          elif [ -f "update_911_fr.py" ]; then PY="update_911_fr.py";
          elif [ -f "scripts/update_911.fr.py" ]; then PY="scripts/update_911.fr.py";
          elif [ -f "scripts/update_911_fr.py" ]; then PY="scripts/update_911_fr.py";
          else echo "↪️ FR 911 scripti yok, adım atlandı."; exit 0; fi
          python -u "$PY"
          test -f "${CRIME_DATA_DIR}/fr_crime_01.csv" || { echo "❌ fr_crime_01.csv üretilmedi"; exit 2; }

      - name: Restore 311 summary cache
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.CRIME_DATA_DIR }}/sf_311_last_5_years.csv
          key: 311-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            311-${{ runner.os }}-

      - name: Prefetch sf_311_last_5_years_y.csv from previous successful run (artifact)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          ARTIFACT_NAME: sf-crime-pipeline-output
          WORKFLOW_NAME: Full Crime Pipeline (SF+FR)
          TARGET_FILE: sf_311_last_5_years_y.csv
          OUT_DIR: crime_prediction_data
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ -f "${OUT_DIR}/${TARGET_FILE}" ]; then
            echo "ℹ️ ${OUT_DIR}/${TARGET_FILE} zaten var, indirme atlandı."
            exit 0
          fi
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y unzip >/dev/null
          if ! command -v gh >/dev/null; then
            type -p curl >/dev/null && sudo curl -sSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh
          fi
          mkdir -p _prev
          FOUND=""
          for RID in $(gh run list -R "${GITHUB_REPOSITORY}" --workflow "${WORKFLOW_NAME}" --status success -L 10 --json databaseId -q '.[].databaseId'); do
            rm -rf "_prev/$RID" && mkdir -p "_prev/$RID"
            if gh run download -R "${GITHUB_REPOSITORY}" "$RID" -n "${ARTIFACT_NAME}" -D "_prev/$RID" >/dev/null 2>&1; then
              F=$(find "_prev/$RID" -type f -iname "${TARGET_FILE}" | head -n1 || true)
              if [ -n "${F:-}" ]; then
                cp -f "$F" "${OUT_DIR}/${TARGET_FILE}"
                echo "✅ Bulundu ve kopyalandı: $F → ${OUT_DIR}/${TARGET_FILE}"
                FOUND="yes"; break
              fi
            fi
          done
          if [ -z "${FOUND}" ]; then
            echo "ℹ️ ${TARGET_FILE} önceki artifact’larda bulunamadı; update_311.py kendi akışıyla devam edecek."
          fi

      - name: 03) 311 → sf_crime_02.csv (bulk 50k)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
        run: |
          set -e
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_311.fr.py" ];      then PY="update_311.fr.py";
            elif [ -f "update_311_fr.py" ];      then PY="update_311_fr.py";
            elif [ -f "scripts/update_311.fr.py" ]; then PY="scripts/update_311.fr.py";
            elif [ -f "scripts/update_311_fr.py" ]; then PY="scripts/update_311_fr.py";
            elif [ -f "update_311.py" ];         then PY="update_311.py";
            else PY="scripts/update_311.py"; fi
          else
            if [ -f "update_311.py" ]; then PY="update_311.py"; else PY="scripts/update_311.py"; fi
          fi
          python -u "$PY"

      - name: Ensure population CSV (local file)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          set -euo pipefail
          mkdir -p "${CRIME_DATA_DIR}"
          DEST="${CRIME_DATA_DIR}/sf_population.csv"
          CANDIDATES=(
            "${CRIME_DATA_DIR}/sf_population.csv"
            "sf_population.csv"
            "data/sf_population.csv"
            "inputs/sf_population.csv"
          )
          FOUND=""
          for p in "${CANDIDATES[@]}"; do
            if [ -f "$p" ]; then
              if [ -e "$DEST" ] && [ "$p" -ef "$DEST" ]; then
                echo "ℹ️ Zaten hedefte: $DEST"
              else
                cp -f "$p" "$DEST"
                echo "✅ Copied: $p → $DEST"
              fi
              FOUND="yes"
              break
            fi
          done
          if [ -z "$FOUND" ]; then
            echo "❌ sf_population.csv bulunamadı. Lütfen repo’ya ekleyin veya ${CRIME_DATA_DIR} altına yerleştirin."
            exit 2
          fi
          echo "---- sf_population.csv (head) ----"
          head -n 5 "$DEST" || true

      - name: (Opsiyonel) sf_population.csv başlık normalize
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          python - <<'PY'
          import os, pandas as pd
          p = os.path.join(os.environ["CRIME_DATA_DIR"], "sf_population.csv")
          df = pd.read_csv(p)
          low = {c.lower(): c for c in df.columns}
          if 'geoid' not in low and 'geography_id' in low:
              df.rename(columns={low['geography_id']: 'GEOID'}, inplace=True)
          for cand in ['population','total_population','b01003_001e','estimate','total','value']:
              if cand in low:
                  if 'population' not in df.columns:
                      df.rename(columns={low[cand]: 'population'}, inplace=True)
                  break
          df.to_csv(p, index=False)
          print("Normalized headers:", df.columns.tolist())
          PY

      - name: FR 02) 311 → fr_crime_02.csv
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
          CRIME_DATA_DIR:        ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_311.fr.py" ]; then PY="update_311.fr.py";
          elif [ -f "update_311_fr.py" ]; then PY="update_311_fr.py";
          elif [ -f "scripts/update_311.fr.py" ]; then PY="scripts/update_311.fr.py";
          elif [ -f "scripts/update_311_fr.py" ]; then PY="scripts/update_311_fr.py";
          else echo "↪️ FR 311 scripti yok, adım atlandı."; exit 0; fi
          python -u "$PY"
          test -f "${CRIME_DATA_DIR}/fr_crime_02.csv" || { echo "❌ fr_crime_02.csv üretilmedi"; exit 2; }

      - name: 04) Nüfus → sf_crime_03.csv (demografi + nüfus)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          POPULATION_PATH:  ${{ env.CRIME_DATA_DIR }}/sf_population.csv
          CENSUS_GEO_LEVEL: ${{ env.CENSUS_GEO_LEVEL }}
          ACS_YEAR:         ${{ env.ACS_YEAR }}
          DEMOG_WHITELIST:  ${{ env.DEMOG_WHITELIST }}
        run: |
          set -e
          PY="update_population.py"
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_population.fr.py" ]; then PY="update_population.fr.py";
            elif [ -f "update_population_fr.py" ]; then PY="update_population_fr.py"; fi
          fi
          python -u "$PY"

      - name: FR 03) Nüfus/Demografi → fr_crime_03.csv
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          CRIME_DATA_DIR:  ${{ env.CRIME_DATA_DIR }}
          CENSUS_GEO_LEVEL: ${{ env.CENSUS_GEO_LEVEL }}
          ACS_YEAR:         ${{ env.ACS_YEAR }}
          DEMOG_WHITELIST:  ${{ env.DEMOG_WHITELIST }}
        run: |
          set -euo pipefail
          if   [ -f "update_population.fr.py" ]; then PY="update_population.fr.py";
          elif [ -f "update_population_fr.py" ]; then PY="update_population_fr.py";
          elif [ -f "scripts/update_population.fr.py" ]; then PY="scripts/update_population.fr.py";
          elif [ -f "scripts/update_population_fr.py" ]; then PY="scripts/update_population_fr.py";
          else echo "↪️ FR nüfus scripti yok, adım atlandı."; exit 0; fi
          python -u "$PY"
          test -f "${CRIME_DATA_DIR}/fr_crime_03.csv" || { echo "❌ fr_crime_03.csv üretilmedi"; exit 2; }

      - name: 05) Otobüs → sf_crime_04.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          set -e
          PY="update_bus.py"
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_bus.fr.py" ]; then PY="update_bus.fr.py";
            elif [ -f "update_bus_fr.py" ]; then PY="update_bus_fr.py"; fi
          fi
          python -u "$PY"

      - name: FR 04) Otobüs → fr_crime_04.csv
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          CRIME_DATA_DIR:  ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_bus.fr.py" ]; then PY="update_bus.fr.py";
          elif [ -f "update_bus_fr.py" ]; then PY="update_bus_fr.py";
          elif [ -f "scripts/update_bus.fr.py" ]; then PY="scripts/update_bus.fr.py";
          elif [ -f "scripts/update_bus_fr.py" ]; then PY="scripts/update_bus_fr.py";
          else echo "↪️ FR bus scripti yok, adım atlandı."; exit 0; fi
          python -u "$PY"
          test -f "${CRIME_DATA_DIR}/fr_crime_04.csv" || { echo "❌ fr_crime_04.csv üretilmedi"; exit 2; }

      - name: 06) Tren (BART) → sf_crime_05.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          set -e
          PY="update_train.py"
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_train.fr.py" ]; then PY="update_train.fr.py";
            elif [ -f "update_train_fr.py" ]; then PY="update_train_fr.py"; fi
          fi
          python -u "$PY"

      - name: FR 05) Tren → fr_crime_05.csv
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          CRIME_DATA_DIR:  ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_train.fr.py" ]; then PY="update_train.fr.py";
          elif [ -f "update_train_fr.py" ]; then PY="update_train_fr.py";
          elif [ -f "scripts/update_train.fr.py" ]; then PY="scripts/update_train.fr.py";
          elif [ -f "scripts/update_train_fr.py" ]; then PY="scripts/update_train_fr.py";
          else echo "↪️ FR train scripti yok, adım atlandı."; exit 0; fi
          python -u "$PY"
          test -f "${CRIME_DATA_DIR}/fr_crime_05.csv" || { echo "❌ fr_crime_05.csv üretilmedi"; exit 2; }

      - name: 07) POI zenginleştirme → sf_crime_06.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          set -e
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_poi.fr.py" ]; then python -u update_poi.fr.py;
            elif [ -f "update_poi_fr.py" ]; then python -u update_poi_fr.py;
            elif [ -f "update_poi.py" ];    then python -u update_poi.py;
            elif [ -f "pipeline_make_sf_crime_06.py" ]; then python -u pipeline_make_sf_crime_06.py;
            else echo "POI adımı bulunamadı"; exit 2; fi
          else
            if [ -f update_poi.py ]; then python -u update_poi.py;
            elif [ -f pipeline_make_sf_crime_06.py ]; then python -u pipeline_make_sf_crime_06.py;
            else echo "POI adımı bulunamadı"; exit 2; fi
          fi

      - name: FR 06) POI → fr_crime_06.csv
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          CRIME_DATA_DIR:  ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_poi.fr.py" ]; then PY="update_poi.fr.py";
          elif [ -f "update_poi_fr.py" ]; then PY="update_poi_fr.py";
          elif [ -f "scripts/update_poi.fr.py" ]; then PY="scripts/update_poi.fr.py";
          elif [ -f "scripts/update_poi_fr.py" ]; then PY="scripts/update_poi_fr.py";
          elif [ -f "update_poi.py" ]; then PY="update_poi.py";
          elif [ -f "scripts/pipeline_make_sf_crime_06.py" ]; then PY="scripts/pipeline_make_sf_crime_06.py";
          else echo "↪️ FR POI scripti yok, adım atlandı."; exit 0; fi
          python -u "$PY"
          test -f "${CRIME_DATA_DIR}/fr_crime_06.csv" || { echo "❌ fr_crime_06.csv üretilmedi"; exit 2; }

      - name: 08) Polis & Devlet binaları → sf_crime_07.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          set -e
          if [ "${PIPELINE_VARIANT}" = "fr" ]; then
            if   [ -f "update_police_gov.fr.py" ]; then python -u update_police_gov.fr.py;
            elif [ -f "update_police_gov_fr.py" ]; then python -u update_police_gov_fr.py;
            elif [ -f "update_police_gov.py" ];    then python -u update_police_gov.py;
            elif [ -f "scripts/enrich_police_gov_06_to_07.py" ]; then python -u scripts/enrich_police_gov_06_to_07.py;
            else echo "Polis/Gov adımı bulunamadı"; exit 2; fi
          else
            if [ -f "update_police_gov.py" ]; then python -u update_police_gov.py;
            elif [ -f "scripts/enrich_police_gov_06_to_07.py" ]; then python -u scripts/enrich_police_gov_06_to_07.py;
            else echo "Polis/Gov adımı bulunamadı"; exit 2; fi
          fi

      - name: FR 07) Polis & Devlet → fr_crime_07.csv
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          CRIME_DATA_DIR:  ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_police_gov.fr.py" ]; then PY="update_police_gov.fr.py";
          elif [ -f "update_police_gov_fr.py" ]; then PY="update_police_gov_fr.py";
          elif [ -f "scripts/enrich_police_gov_06_to_07.fr.py" ]; then PY="scripts/enrich_police_gov_06_to_07.fr.py";
          elif [ -f "scripts/enrich_police_gov_06_to_07_fr.py" ]; then PY="scripts/enrich_police_gov_06_to_07_fr.py";
          elif [ -f "update_police_gov.py" ]; then PY="update_police_gov.py";
          elif [ -f "scripts/enrich_police_gov_06_to_07.py" ]; then PY="scripts/enrich_police_gov_06_to_07.py";
          else echo "↪️ FR police/gov scripti yok, adım atlandı."; exit 0; fi
          python -u "$PY"
          test -f "${CRIME_DATA_DIR}/fr_crime_07.csv" || { echo "❌ fr_crime_07.csv üretilmedi"; exit 2; }

      # 09) Hava durumu — sadece arşiv CSV (suça merge ETMEZ)
      - name: 09) Hava durumu → sf_weather_5years.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # Weather arşiv dosyasını üret (suç datasına merge etmiyoruz)
          if [ -f "update_weather.py" ]; then
            python -u update_weather.py
          elif [ -f "scripts/update_weather.py" ]; then
            python -u scripts/update_weather.py
          else
            echo "❌ Weather script not found"; exit 2
          fi
          test -f "sf_weather_5years.csv" || { echo "❌ Beklenen çıktı yok: sf_weather_5years.csv"; exit 2; }
          mkdir -p "${CRIME_DATA_DIR}"
          cp -f sf_weather_5years.csv "${CRIME_DATA_DIR}/sf_weather_5years.csv"
          echo "sf_weather_5years.csv — ilk 5 satır:"
          head -n 5 "${CRIME_DATA_DIR}/sf_weather_5years.csv" || true

      - name: FR 08) (Opsiyonel) Weather arşivini üret, MERGE YAPMA → fr_crime_08.csv bekleme
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # Not: FR hattında weather sadece arşivlenir; fr_crime_07 ile MERGE edilmez.
          if [ -f "update_weather.py" ]; then
            python -u update_weather.py
          elif [ -f "scripts/update_weather.py" ]; then
            python -u scripts/update_weather.py
          else
            echo "↪️ Weather script yok, atlandı."
          fi
          # fr_crime_08.csv bu adımda üretilmez; 10.1 komşuluk öncesi FR girdi olarak fr_crime_08 yerine fr_crime_07 kullanılacaksa orayı da güncelle.

      # 10) SF: neighbors ile 07 → 08 (scripts/make_neighbors.py)
      - name: 10) SF komşuluk → sf_crime_08.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          SRC="${CRIME_DATA_DIR}/sf_crime_07.csv"
          DST="${CRIME_DATA_DIR}/sf_crime_08.csv"
          test -f "$SRC" || { echo "❌ Girdi eksik: $SRC"; exit 2; }

          echo "▶︎ SF komşuluk zenginleştirme başlıyor: $SRC → $DST"
          if [ -f "scripts/make_neighbors.py" ]; then
            # Argümanlı çağrı (varsa), yoksa argümansız fallback
            python -u scripts/make_neighbors.py --in "$SRC" --out "$DST" || python -u scripts/make_neighbors.py
          elif [ -f "make_neigbors.py" ]; then
            python -u make_neigbors.py --in "$SRC" --out "$DST" || python -u make_neigbors.py
          else
            echo "❌ scripts/make_neighbors.py bulunamadı"; exit 2
          fi

          test -f "$DST" || { echo "❌ Beklenen çıktı yok: $DST"; exit 2; }
          echo "---- sf_crime_08.csv (head) ----"
          head -n 5 "$DST" || true

      # 10.2) SF Feature Analysis (EDA only) — unified_feature_analysis.py
      - name: 10.2) SF Feature Analysis (EDA only)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          set -euo pipefail
          SF_IN="${CRIME_DATA_DIR}/sf_crime_08.csv"
          OUTDIR="outputs_feature_analysis/sf_08"
          if [ -f "${SF_IN}" ]; then
            echo "▶︎ SF EDA başlıyor: ${SF_IN} → ${OUTDIR}"
            python -u unified_feature_analysis.py \
              --csv "${SF_IN}" \
              --outdir "${OUTDIR}"
            echo "✅ SF EDA tamamlandı."
          else
            echo "↪️ ${SF_IN} bulunamadı, SF EDA atlandı."
          fi

      # 10.3) FR: neighbors ile 08 → 09 (scripts/make_neighbors_fr.py)
      - name: 10.1) FR komşuluk → fr_crime_09.csv
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          SRC="${CRIME_DATA_DIR}/fr_crime_08.csv"
          DST="${CRIME_DATA_DIR}/fr_crime_09.csv"

          if [ -f "$SRC" ]; then
            echo "▶︎ FR komşuluk zenginleştirme başlıyor: $SRC → $DST"
            if [ -f "scripts/make_neighbors_fr.py" ]; then
              python -u scripts/make_neighbors_fr.py --in "$SRC" --out "$DST" || python -u scripts/make_neighbors_fr.py
            elif [ -f "make_neigbors_fr.py" ]; then
              python -u make_neigbors_fr.py --in "$SRC" --out "$DST" || python -u make_neigbors_fr.py
            else
              echo "❌ scripts/make_neighbors_fr.py bulunamadı"; exit 2
            fi
            test -f "$DST" || { echo "❌ Beklenen çıktı yok: $DST"; exit 2; }
            echo "---- fr_crime_09.csv (head) ----"
            head -n 5 "$DST" || true
          else
            echo "↪️ FR girdi yok ($SRC). Bu adım atlandı."
          fi

      # 10.4) FR Feature Analysis (EDA only) — unified_feature_analysis.py
      - name: 10.2) FR Feature Analysis (EDA only)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          set -euo pipefail
          FR_IN="${CRIME_DATA_DIR}/fr_crime_09.csv"
          OUTDIR="outputs_feature_analysis/fr_09"
          if [ -f "${FR_IN}" ]; then
            echo "▶︎ FR EDA başlıyor: ${FR_IN} → ${OUTDIR}"
            python -u unified_feature_analysis.py \
              --csv "${FR_IN}" \
              --outdir "${OUTDIR}"
            echo "✅ FR EDA tamamlandı."
          else
            echo "↪️ ${FR_IN} bulunamadı, FR EDA atlandı."
          fi

      # 11) Kalite kontrol — SF(08) / FR(09)
      - name: "11) Kalite kontrol (SF: 08, FR: 09)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
      
          # SF kontrol: sf_crime_08.csv
          SF="${CRIME_DATA_DIR}/sf_crime_08.csv"
          if [ -f "$SF" ]; then
            echo "✅ SF Var: $SF  | boyut=$(stat -c%s "$SF" 2>/dev/null || stat -f%z "$SF") byte"
            echo "---- sf_crime_08.csv (head) ----"
            head -n 3 "$SF" || true
          else
            echo "ℹ️ SF Yok: $SF"
          fi
      
          # FR kontrol: fr_crime_09.csv
          FR="${CRIME_DATA_DIR}/fr_crime_09.csv"
          if [ -f "$FR" ]; then
            echo "✅ FR Var: $FR  | boyut=$(stat -c%s "$FR" 2>/dev/null || stat -f%z "$FR") byte"
            echo "---- fr_crime_09.csv (head) ----"
            head -n 3 "$FR" || true
          else
            echo "ℹ️ FR Yok: $FR"
          fi

      # 12) (Önizleme) kritik CSV’ler
      - name: 12) Hızlı önizleme (09)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          echo "---- sf_crime_08.csv (head) ----"; head -n 5 "${CRIME_DATA_DIR}/sf_crime_08.csv" || true
          echo "---- fr_crime_09.csv (head) ----"; head -n 5 "${CRIME_DATA_DIR}/fr_crime_09.csv" || true

      # 13) Paket hazırlığı — SF(08) & FR(09) ve ana CSV'ler
      - name: 12.9) Paketle (paquet.zip)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          PKG_DIR="_pkg"; mkdir -p "$PKG_DIR"
      
          # Seçili CSV'leri topla: sf_crime.csv, sf_crime_L*.csv, sf_crime_08.csv, fr_crime_09.csv
          cp -f "${CRIME_DATA_DIR}/sf_crime.csv"            "$PKG_DIR/"  2>/dev/null || true
          cp -f ${CRIME_DATA_DIR}/sf_crime_L*.csv           "$PKG_DIR/"  2>/dev/null || true
          cp -f "${CRIME_DATA_DIR}/sf_crime_08.csv"         "$PKG_DIR/"  2>/dev/null || true
          cp -f "${CRIME_DATA_DIR}/fr_crime_09.csv"         "$PKG_DIR/"  2>/dev/null || true
      
          # Bilgi amaçlı: hangi dosyalar eklendi
          echo "----- Paket içeriği (CSV'ler) -----"
          ls -lah "$PKG_DIR" || true
      
          # FR EDA çıktı klasörünü de paket yanına kopyala (artifact'ta dursun)
          if [ -d "outputs_feature_analysis/fr_09" ]; then
            mkdir -p "$PKG_DIR/fr_eda"
            cp -rf outputs_feature_analysis/fr_09/* "$PKG_DIR/fr_eda/" || true
          fi
      
          # zip oluştur (paquet)
          ZIP_NAME="paquet_run_${GITHUB_RUN_NUMBER}.zip"
          (cd "$PKG_DIR" && zip -r "../${ZIP_NAME}" . >/dev/null || true)
          echo "ZIP oluşturuldu: ${ZIP_NAME}"
      
          # Geçici dosyalar silinmez; aynı job içinde tekrar kullanılabilir
      
      # 14) ÇIKTILARIN SAKLANMASI (persist seçimine göre)
      # 14a) Artifact: paket zip + FR EDA + ilgili CSV’ler
      - name: 13a) Upload artifacts (paquet + FR EDA + CSVs)
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PERSIST_MODE == 'artifact' }}
        uses: actions/upload-artifact@v4
        with:
          name: sf-crime-pipeline-output
          if-no-files-found: warn
          path: |
            paquet_run_${{ github.run_number }}.zip
            ${{ env.CRIME_DATA_DIR }}/sf_crime.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_08.csv
            ${{ env.CRIME_DATA_DIR }}/fr_crime_09.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_L*.csv
            outputs_feature_analysis/fr_09/**
      
      # 14b) Commit: (opsiyonel) FR EDA + CSV’ler (zip’i commit etmiyoruz)
      - name: 13b) Commit FR outputs to repo
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PERSIST_MODE == 'commit' }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A outputs_feature_analysis/fr_09 \
                    "${CRIME_DATA_DIR}/fr_crime_09.csv" \
                    "${CRIME_DATA_DIR}/sf_crime.csv" \
                    "${CRIME_DATA_DIR}/sf_crime_08.csv" \
                    ${CRIME_DATA_DIR}/sf_crime_L*.csv 2>/dev/null || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Pipeline outputs (FR EDA + key CSVs) [run $GITHUB_RUN_NUMBER]"
            git push
          fi
      
      # 14c) Release: istersen zip’i de yayına ekle
      - name: 13c) Release FR/SF outputs (zip dahil)
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PERSIST_MODE == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          tag_name: pipeline-${{ github.run_number }}
          name: "Pipeline Outputs #${{ github.run_number }}"
          files: |
            paquet_run_${{ github.run_number }}.zip
            outputs_feature_analysis/fr_09/**/*
            ${{ env.CRIME_DATA_DIR }}/fr_crime_09.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_08.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_L*.csv

