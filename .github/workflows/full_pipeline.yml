name: Full Crime Pipeline (SF+FR)

on:
  schedule:
    - cron: "0 14,15 * * *"   # SF 07:00: 14:00 UTC (yaz), 15:00 UTC (kış)
  workflow_dispatch:
    inputs:
      persist:
        description: "Sonuçları nasıl saklayalım?"
        type: choice
        options: [artifact, release, commit, none]
        default: artifact
      force:
        description: "Manuel tetiklemede 07:00 kapısını YOK SAY"
        type: boolean
        default: true
      top_k:
        description: "Stacking: her saat dilimi için önerilecek GEOID sayısı"
        default: "50"
      variant:
        description: "Pipeline varyantı (default | fr)"
        type: choice
        options: [default, fr]
        default: fr

permissions:
  actions: read
  contents: write

concurrency:
  group: full-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  CRIME_DATA_DIR: crime_prediction_data
  GEOID_LEN: "11"

  BACKFILL_DAYS: "0"
  SF_SODA_FETCH_STRATEGY: ${{ vars.SF_SODA_FETCH_STRATEGY || 'bulk' }}
  SF_SODA_PAGE_LIMIT:    ${{ vars.SF_SODA_PAGE_LIMIT    || '50000' }}
  SF_SODA_MAX_PAGES:     ${{ vars.SF_SODA_MAX_PAGES     || '100' }}

  SF911_API_URL:       ${{ vars.SF911_API_URL       || 'https://data.sfgov.org/resource/2zdj-bwza.json' }}
  SF911_AGENCY_FILTER: ${{ vars.SF911_AGENCY_FILTER || 'agency like "%Police%"' }}
  SF911_API_TOKEN:     ${{ secrets.SF911_API_TOKEN }}
  SOCS_APP_TOKEN:      ${{ secrets.SOCS_APP_TOKEN }}

  PATROL_TOP_K: ${{ github.event.inputs.top_k || '50' }}

  PATROL_HORIZON_DAYS: "3"
  WX_LOCATION: "san francisco"
  WX_UNIT: "us"

  ACS_YEAR: ${{ vars.ACS_YEAR || 'LATEST' }}
  DEMOG_WHITELIST: ${{ vars.DEMOG_WHITELIST || '' }}
  CENSUS_GEO_LEVEL: ${{ vars.CENSUS_GEO_LEVEL || 'auto' }}
  PIPELINE_VARIANT: ${{ github.event.inputs.variant || vars.PIPELINE_VARIANT || 'fr' }}

  # FR çıktılarını saklama modu (schedule tetiklerinde de çalışsın)
  PERSIST_MODE: ${{ github.event.inputs.persist || 'artifact' }}

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Ensure LFS objects
        run: |
          git lfs install
          git lfs pull
          echo "Repo root:"; ls -lah
          echo "crime_prediction_data:"; ls -lah crime_prediction_data || true
          echo "CRIME_DATA_DIR:"; ls -lah "${CRIME_DATA_DIR}" || true

      - name: Ensure data dir
        run: mkdir -p "${CRIME_DATA_DIR}"

      # --- SF 07:00 kapısı (TZ ayarla + saat kontrolü) ---
      - name: Set runner timezone to America/Los_Angeles
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "America/Los_Angeles"

      - name: Gate by local SF time == 07 (bypassable)
        id: gate
        run: |
          now="$(date)"
          echo "Runner local time: $now"
          echo "RUN_LOCAL_TIME=$now" >> $GITHUB_ENV
          # Manuel + force=true ise doğrudan geç
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Aksi halde 07:00 kontrolü
          if [ "$(date +%H)" = "07" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug variant
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          echo "PIPELINE_VARIANT=${PIPELINE_VARIANT}"

      - name: Skip summary (outside 07:00 and not forced)
        if: ${{ steps.gate.outputs.proceed != 'true' }}
        run: |
          {
            echo "## SF Crime Pipeline"
            echo ""
            echo "- Çalışma zamanı (SF): **$(date)**"
            echo "- Not: 07:00 kapısı nedeniyle adımlar atlandı. Manuel tetiklerken \`force=true\` verin."
          } >> $GITHUB_STEP_SUMMARY

      - name: System deps for rtree (optional)
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: sudo apt-get update && sudo apt-get install -y libspatialindex-dev

      - name: Set up Python 3.11
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          python -m pip install -U pip wheel setuptools
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -U "geopandas==1.0.1" "shapely==2.0.4" "pyproj==3.6.1" "pyogrio==0.9.0" "rtree==1.3.0"

      - name: Geo stack smoke test
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        run: |
          python - <<'PY'
          import geopandas, shapely, pyproj, pyogrio, pandas
          print("geopandas", geopandas.__version__)
          print("shapely", shapely.__version__)
          print("pyproj", pyproj.__version__)
          print("pyogrio", pyogrio.__version__)
          print("pandas", pandas.__version__)
          PY

      # >>> Prefetch sf_crime_y.csv
      - name: "00) Prefetch sf_crime_y.csv from previous successful run (artifact)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          ARTIFACT_NAME: sf-crime-pipeline-output
          WORKFLOW_NAME: Full Crime Pipeline (SF+FR)
          TARGET_FILE: sf_crime_y.csv
          OUT_DIR: crime_prediction_data
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ -f "${OUT_DIR}/${TARGET_FILE}" ]; then
            echo "ℹ️ ${OUT_DIR}/${TARGET_FILE} zaten var, indirme atlandı."
            exit 0
          fi
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y unzip >/dev/null
          if ! command -v gh >/dev/null; then
            type -p curl >/dev/null && sudo curl -sSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh
          fi
          mkdir -p _prev
          FOUND=""
          RUNS=$(gh run list -R "${GITHUB_REPOSITORY}" --workflow "${WORKFLOW_NAME}" --status success -L 10 --json databaseId -q '.[].databaseId' || true)
          for RID in ${RUNS}; do
            rm -rf "_prev/$RID" && mkdir -p "_prev/$RID"
            if gh run download -R "${GITHUB_REPOSITORY}" "$RID" -n "${ARTIFACT_NAME}" -D "_prev/$RID" >/dev/null 2>&1; then
              F=$(find "_prev/$RID" -type f -iname "${TARGET_FILE}" | head -n1 || true)
              if [ -n "${F:-}" ]; then
                cp -f "$F" "${OUT_DIR}/${TARGET_FILE}"
                echo "✅ Bulundu ve kopyalandı: $F → ${OUT_DIR}/${TARGET_FILE}"
                FOUND="yes"; break
              fi
            fi
          done
          if [ -z "${FOUND}" ]; then
            echo "ℹ️ ${TARGET_FILE} geçmiş artifact’larda bulunamadı; release fallback devreye girebilir."
          fi
      # <<<

      # ---- PIPELINE ----
      - name: "01A) SF: Suç tabanı & grid → sf_crime.csv (+gridler)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          Y_CSV_NAME: ${{ env.CRIME_DATA_DIR }}/sf_crime_y.csv
          CACHE_WRITE_Y_ONLY: "1"
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          echo "▶ SF base + grid başlıyor..."
      
          PY="update_crime.py"
          if [ ! -f "$PY" ]; then
            echo "❌ $PY bulunamadı"; exit 2
          fi
          python -u "$PY"
      
          # Kısa özet
          if [ -f "${CRIME_DATA_DIR}/sf_crime.csv" ]; then
            echo "---- sf_crime.csv (head) ----"
            head -n 5 "${CRIME_DATA_DIR}/sf_crime.csv" || true
          fi
          if [ -f "sf_crime_grid_full_labeled.csv" ]; then
            echo "---- sf_crime_grid_full_labeled.csv (head) ----"
            head -n 5 "sf_crime_grid_full_labeled.csv" || true
          elif [ -f "${CRIME_DATA_DIR}/sf_crime_grid_full_labeled.csv" ]; then
            echo "---- sf_crime_grid_full_labeled.csv (head) ----"
            head -n 5 "${CRIME_DATA_DIR}/sf_crime_grid_full_labeled.csv" || true
          fi
      
      - name: "01.1) SF: GEOID+Y_label → sf_crime_L.csv (head dahil)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          GEOID_LEN: ${{ env.GEOID_LEN }}
          AGGR_Y_THRESHOLD: ${{ env.AGGR_Y_THRESHOLD || '1' }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pandas as pd
          cdir = os.environ["CRIME_DATA_DIR"]
          L   = int(os.environ.get("GEOID_LEN","11"))
          TH  = int(os.environ.get("AGGR_Y_THRESHOLD","1"))
          def norm_geoid(s):
              return s.astype(str).str.extract(r"(\d+)", expand=False).str[:L].str.zfill(L)
          grid_candidates = ["sf_crime_grid_full_labeled.csv", os.path.join(cdir,"sf_crime_grid_full_labeled.csv")]
          grid_src = next((p for p in grid_candidates if os.path.isfile(p)), None)
          if grid_src:
              print(f"Kaynak: GRID → {grid_src}")
              df = pd.read_csv(grid_src, low_memory=False)
              cols = {c.lower(): c for c in df.columns}
              if "y_label" not in cols:
                  if "crime_count" in cols:
                      df["Y_label"] = (pd.to_numeric(df[cols["crime_count"]], errors="coerce").fillna(0) >= TH).astype(int)
                      print(f"Not: GRID içinde Y_label yoktu, crime_count>={TH} ile üretildi.")
                  else:
                      raise SystemExit(f"GRID var ama Y_label/crime_count yok. Kolonlar: {list(df.columns)}")
              geoid_col = cols.get("geoid") or "GEOID"
              out = df[[geoid_col, "Y_label"]].copy()
              out.columns = ["GEOID","Y_label"]
              out["GEOID"] = norm_geoid(out["GEOID"])
              out = out.groupby("GEOID", as_index=False)["Y_label"].max()
          else:
              for name in ("sf_crime_y.csv","sf_crime.csv"):
                  src = os.path.join(cdir, name)
                  if os.path.isfile(src): break
              else:
                  raise SystemExit("Girdi yok: GRID ya da sf_crime_y.csv / sf_crime.csv bulunamadı.")
              print(f"Kaynak: EVENT → {src}")
              df = pd.read_csv(src, low_memory=False)
              low = {c.lower(): c for c in df.columns}
              geoid_col = low.get("geoid") or low.get("geography_id") or low.get("geoid11") or low.get("geoid_11")
              if not geoid_col: raise SystemExit(f"GEOID kolonu yok. Kolonlar: {list(df.columns)}")
              g = df[[geoid_col]].copy(); g.columns = ["GEOID"]
              g["GEOID"] = norm_geoid(g["GEOID"])
              g = g.dropna(); g = g[g["GEOID"] != ""].drop_duplicates()
              g["Y_label"] = 1
              out = g
          dest = os.path.join(cdir, "sf_crime_L.csv")
          out.to_csv(dest, index=False)
          print(f"Yazıldı: {dest} | satır: {len(out):,}")
          PY
          echo "---- sf_crime_L.csv (head) ----"
          head -n 5 "${CRIME_DATA_DIR}/sf_crime_L.csv" || true
      
      - name: "01B) FR: fr_crime.csv oluştur (head dahil)"
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          FR_SRC_PATH: ${{ env.CRIME_DATA_DIR }}/sf_crime_grid_full_labeled.csv
          FR_OUT_PATH: fr_crime.csv
          FR_MIRROR_DIR: crime_prediction_data_pre
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          echo "➡️ fr_crime.csv üretiliyor..."
      
          if [ -f "update_crime_fr.py" ] || [ -f "update_crime.fr.py" ] || [ -f "scripts/update_crime_fr.py" ] || [ -f "scripts/update_crime.fr.py" ]; then
            PY="$( [ -f update_crime_fr.py ] && echo update_crime_fr.py || true )"
            PY="${PY:-$( [ -f update_crime.fr.py ] && echo update_crime.fr.py || true )}"
            PY="${PY:-$( [ -f scripts/update_crime_fr.py ] && echo scripts/update_crime_fr.py || true )}"
            PY="${PY:-$( [ -f scripts/update_crime.fr.py ] && echo scripts/update_crime.fr.py || true )}"
            python -u "$PY"
          else
            python - <<'PY'
            import pandas as pd, os, shutil
            from pathlib import Path
            src = Path(os.getenv("FR_SRC_PATH","sf_crime_grid_full_labeled.csv"))
            if not src.exists():
                raise SystemExit(f"❌ Kaynak bulunamadı: {src}")
            out = Path(os.getenv("FR_OUT_PATH","fr_crime.csv"))
            mir = Path(os.getenv("FR_MIRROR_DIR","crime_prediction_data_pre"))
            df = pd.read_csv(src, low_memory=False)
            if "GEOID" in df.columns:
                df["GEOID"] = df["GEOID"].astype(str).str.zfill(11)
            df.to_csv(out, index=False)
            mir.mkdir(exist_ok=True); shutil.copy2(out, mir / out.name)
            print(f"✅ Kaydedildi: {out} ({len(df):,} satır)")
            PY
          fi
      
          if [ -f "fr_crime.csv" ]; then
            echo "---- fr_crime.csv (head) ----"; head -n 5 fr_crime.csv || true
          fi

      # =========================
      # 02) 911 — SF önce, sonra FR (tek başlık)
      # =========================
      
      - name: "02) 911 • Restore SF summary cache"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.CRIME_DATA_DIR }}/sf_911_last_5_year.csv
          key: 911-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            911-${{ runner.os }}-
      
      - name: "02) 911 • Prefetch sf_911_last_5_year_y.csv (artifact)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          ARTIFACT_NAME: sf-crime-pipeline-output
          WORKFLOW_NAME: Full Crime Pipeline (SF+FR)
          TARGET_FILE: sf_911_last_5_year_y.csv
          OUT_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ -f "${OUT_DIR}/${TARGET_FILE}" ]; then
            echo "ℹ️ ${OUT_DIR}/${TARGET_FILE} zaten var, indirme atlandı."
          else
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y unzip >/dev/null
            if ! command -v gh >/dev/null; then
              type -p curl >/dev/null && sudo curl -sSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh
            fi
            mkdir -p _prev
            FOUND=""
            for RID in $(gh run list -R "${GITHUB_REPOSITORY}" --workflow "${WORKFLOW_NAME}" --status success -L 10 --json databaseId -q '.[].databaseId'); do
              rm -rf "_prev/$RID" && mkdir -p "_prev/$RID"
              if gh run download -R "${GITHUB_REPOSITORY}" "$RID" -n "${ARTIFACT_NAME}" -D "_prev/$RID" >/dev/null 2>&1; then
                F=$(find "_prev/$RID" -type f -iname "${TARGET_FILE}" | head -n1 || true)
                if [ -n "${F:-}" ]; then
                  cp -f "$F" "${OUT_DIR}/${TARGET_FILE}"
                  echo "✅ Bulundu ve kopyalandı: $F → ${OUT_DIR}/${TARGET_FILE}"
                  FOUND="yes"; break
                fi
              fi
            done
            if [ -z "${FOUND}" ]; then
              echo "ℹ️ ${TARGET_FILE} geçmiş artifact’larda yok; script kendi akışıyla devam edecek."
            fi
          fi
      
          # Prefetch/Cache varsa ilk 5 satırı göster
          [ -f "${OUT_DIR}/sf_911_last_5_year.csv" ] && { echo "---- sf_911_last_5_year.csv (head) ----"; head -n 5 "${OUT_DIR}/sf_911_last_5_year.csv" || true; }
          [ -f "${OUT_DIR}/sf_911_last_5_year_y.csv" ] && { echo "---- sf_911_last_5_year_y.csv (head) ----"; head -n 5 "${OUT_DIR}/sf_911_last_5_year_y.csv" || true; }
      
      - name: "02) 911 • SF: update_911 → sf_crime_01.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SF911_API_URL:         ${{ env.SF911_API_URL }}
          SF911_AGENCY_FILTER:   ${{ env.SF911_AGENCY_FILTER }}
          SF911_API_TOKEN:       ${{ env.SF911_API_TOKEN }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
          CRIME_DATA_DIR:        ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # SF hattı için FR scriptine geçmeyelim; daima SF 911 scriptini çalıştır
          if   [ -f "update_911.py" ]; then PY="update_911.py";
          elif [ -f "scripts/update_911.py" ]; then PY="scripts/update_911.py";
          else echo "❌ SF 911 scripti bulunamadı"; exit 2; fi
      
          python -u "$PY"
      
          # Çıktı head'leri
          SF01="${CRIME_DATA_DIR}/sf_crime_01.csv"
          if [ -f "$SF01" ]; then
            echo "---- sf_crime_01.csv (head) ----"; head -n 5 "$SF01" || true
          else
            echo "ℹ️ Beklenen çıktı yok: $SF01"
          fi
      
      - name: "02) 911 • FR: update_911_fr → fr_crime_01.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('**/update_911.fr.py', '**/update_911_fr.py', 'scripts/update_911.fr.py', 'scripts/update_911_fr.py') != '') }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SF911_API_URL:         ${{ env.SF911_API_URL }}
          SF911_AGENCY_FILTER:   ${{ env.SF911_AGENCY_FILTER }}
          SF911_API_TOKEN:       ${{ env.SF911_API_TOKEN }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
          CRIME_DATA_DIR:        ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_911.fr.py" ]; then PY="update_911.fr.py";
          elif [ -f "update_911_fr.py" ]; then PY="update_911_fr.py";
          elif [ -f "scripts/update_911.fr.py" ]; then PY="scripts/update_911.fr.py";
          elif [ -f "scripts/update_911_fr.py" ]; then PY="scripts/update_911_fr.py";
          else echo "↪️ FR 911 scripti yok, adım atlandı."; exit 0; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/fr_crime_01.csv"
          test -f "$OUT" || { echo "❌ fr_crime_01.csv üretilmedi"; exit 2; }
          echo "---- fr_crime_01.csv (head) ----"
          head -n 5 "$OUT" || true

      # =========================
      # 03) 311 — SF önce, sonra FR (tek başlık)
      # =========================
      
      - name: "03) 311 • Restore SF summary cache"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.CRIME_DATA_DIR }}/sf_311_last_5_years.csv
          key: 311-${{ runner.os }}-${{ github.run_number }}
          restore-keys: |
            311-${{ runner.os }}-
      
      - name: "03) 311 • Prefetch sf_311_last_5_years_y.csv (artifact)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          ARTIFACT_NAME: sf-crime-pipeline-output
          WORKFLOW_NAME: Full Crime Pipeline (SF+FR)
          TARGET_FILE: sf_311_last_5_years_y.csv
          OUT_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ -f "${OUT_DIR}/${TARGET_FILE}" ]; then
            echo "ℹ️ ${OUT_DIR}/${TARGET_FILE} zaten var, indirme atlandı."
          else
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y unzip >/dev/null
            if ! command -v gh >/dev/null; then
              type -p curl >/dev/null && sudo curl -sSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh
            fi
            mkdir -p _prev
            FOUND=""
            for RID in $(gh run list -R "${GITHUB_REPOSITORY}" --workflow "${WORKFLOW_NAME}" --status success -L 10 --json databaseId -q '.[].databaseId'); do
              rm -rf "_prev/$RID" && mkdir -p "_prev/$RID"
              if gh run download -R "${GITHUB_REPOSITORY}" "$RID" -n "${ARTIFACT_NAME}" -D "_prev/$RID" >/dev/null 2>&1; then
                F=$(find "_prev/$RID" -type f -iname "${TARGET_FILE}" | head -n1 || true)
                if [ -n "${F:-}" ]; then
                  cp -f "$F" "${OUT_DIR}/${TARGET_FILE}"
                  echo "✅ Bulundu ve kopyalandı: $F → ${OUT_DIR}/${TARGET_FILE}"
                  FOUND="yes"; break
                fi
              fi
            done
            if [ -z "${FOUND}" ]; then
              echo "ℹ️ ${TARGET_FILE} geçmiş artifact’larda yok; update_311.py kendi akışıyla devam edecek."
            fi
          fi
      
          # Prefetch/Cache dosyalarının ilk 5 satırı
          [ -f "${OUT_DIR}/sf_311_last_5_years.csv" ] && { echo "---- sf_311_last_5_years.csv (head) ----"; head -n 5 "${OUT_DIR}/sf_311_last_5_years.csv" || true; }
          [ -f "${OUT_DIR}/sf_311_last_5_years_y.csv" ] && { echo "---- sf_311_last_5_years_y.csv (head) ----"; head -n 5 "${OUT_DIR}/sf_311_last_5_years_y.csv" || true; }
      
      - name: "03) 311 • SF: update_311 → sf_crime_02.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
          CRIME_DATA_DIR:        ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # SF hattı için SF scriptini seç (FR scriptlerine geçme)
          if   [ -f "update_311.py" ]; then PY="update_311.py";
          elif [ -f "scripts/update_311.py" ]; then PY="scripts/update_311.py";
          else echo "❌ SF 311 scripti bulunamadı"; exit 2; fi
      
          python -u "$PY"
      
          # Çıkışın ilk 5 satırı
          SF02="${CRIME_DATA_DIR}/sf_crime_02.csv"
          if [ -f "$SF02" ]; then
            echo "---- sf_crime_02.csv (head) ----"; head -n 5 "$SF02" || true
          else
            echo "ℹ️ Beklenen çıktı yok: $SF02"
          fi
      
      - name: "03) 311 • FR: update_311_fr → fr_crime_02.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('**/update_311.fr.py', '**/update_311_fr.py', 'scripts/update_311.fr.py', 'scripts/update_311_fr.py') != '') }}
        env:
          SF_SODA_FETCH_STRATEGY: ${{ env.SF_SODA_FETCH_STRATEGY }}
          SF_SODA_PAGE_LIMIT:    ${{ env.SF_SODA_PAGE_LIMIT }}
          SF_SODA_MAX_PAGES:     ${{ env.SF_SODA_MAX_PAGES }}
          SOCS_APP_TOKEN:        ${{ env.SOCS_APP_TOKEN }}
          BACKFILL_DAYS:         ${{ env.BACKFILL_DAYS }}
          CRIME_DATA_DIR:        ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_311.fr.py" ]; then PY="update_311.fr.py";
          elif [ -f "update_311_fr.py" ]; then PY="update_311_fr.py";
          elif [ -f "scripts/update_311.fr.py" ]; then PY="scripts/update_311.fr.py";
          elif [ -f "scripts/update_311_fr.py" ]; then PY="scripts/update_311_fr.py";
          else echo "↪️ FR 311 scripti yok, adım atlandı."; exit 0; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/fr_crime_02.csv"
          test -f "$OUT" || { echo "❌ fr_crime_02.csv üretilmedi"; exit 2; }
          echo "---- fr_crime_02.csv (head) ----"
          head -n 5 "$OUT" || true
          
      # =========================
      # 04) Nüfus/Demografi — SF önce, sonra FR (tek başlık)
      # =========================
      
      - name: "04) Population • Ensure sf_population.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          mkdir -p "${CRIME_DATA_DIR}"
          DEST="${CRIME_DATA_DIR}/sf_population.csv"
          CANDIDATES=(
            "${CRIME_DATA_DIR}/sf_population.csv"
            "sf_population.csv"
            "data/sf_population.csv"
            "inputs/sf_population.csv"
          )
          FOUND=""
          for p in "${CANDIDATES[@]}"; do
            if [ -f "$p" ]; then
              if [ -e "$DEST" ] && [ "$p" -ef "$DEST" ]; then
                echo "ℹ️ Zaten hedefte: $DEST"
              else
                cp -f "$p" "$DEST"
                echo "✅ Copied: $p → $DEST"
              fi
              FOUND="yes"
              break
            fi
          done
          if [ -z "$FOUND" ]; then
            echo "❌ sf_population.csv bulunamadı. Lütfen repo’ya ekleyin veya ${CRIME_DATA_DIR} altına yerleştirin."
            exit 2
          fi
          echo "---- sf_population.csv (head) ----"
          head -n 5 "$DEST" || true
      
      - name: "04) Population • (Opsiyonel) Başlık normalize (GEOID & population)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pandas as pd
          p = os.path.join(os.environ["CRIME_DATA_DIR"], "sf_population.csv")
          df = pd.read_csv(p)
          low = {c.lower(): c for c in df.columns}
      
          # GEOID kolonunu normalize et
          if 'geoid' not in low and 'geography_id' in low:
              df.rename(columns={low['geography_id']: 'GEOID'}, inplace=True)
          elif 'geoid' in low and low['geoid'] != 'GEOID':
              df.rename(columns={low['geoid']: 'GEOID'}, inplace=True)
      
          # population kolonunu normalize et (yaygın adaylar)
          for cand in ['population','total_population','b01003_001e','estimate','total','value']:
              if cand in low:
                  if 'population' not in df.columns:
                      df.rename(columns={low[cand]: 'population'}, inplace=True)
                  break
      
          df.to_csv(p, index=False)
          print("Normalized headers:", df.columns.tolist())
          PY
      
          echo "---- sf_population.csv (post-normalize head) ----"
          head -n 5 "${CRIME_DATA_DIR}/sf_population.csv" || true
      
      - name: "04) Population • SF: update_population → sf_crime_03.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          POPULATION_PATH:  ${{ env.CRIME_DATA_DIR }}/sf_population.csv
          CENSUS_GEO_LEVEL: ${{ env.CENSUS_GEO_LEVEL }}
          ACS_YEAR:         ${{ env.ACS_YEAR }}
          DEMOG_WHITELIST:  ${{ env.DEMOG_WHITELIST }}
          CRIME_DATA_DIR:   ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_population.py" ]; then PY="update_population.py";
          elif [ -f "scripts/update_population.py" ]; then PY="scripts/update_population.py";
          else echo "❌ SF population scripti bulunamadı"; exit 2; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/sf_crime_03.csv"
          if [ -f "$OUT" ]; then
            echo "---- sf_crime_03.csv (head) ----"; head -n 5 "$OUT" || true
          else
            echo "ℹ️ Beklenen çıktı yok: $OUT"
          fi
      
      - name: "04) Population • FR: update_population_fr → fr_crime_03.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('**/update_population.fr.py', '**/update_population_fr.py', 'scripts/update_population.fr.py', 'scripts/update_population_fr.py') != '') }}
        env:
          CRIME_DATA_DIR:   ${{ env.CRIME_DATA_DIR }}
          CENSUS_GEO_LEVEL: ${{ env.CENSUS_GEO_LEVEL }}
          ACS_YEAR:         ${{ env.ACS_YEAR }}
          DEMOG_WHITELIST:  ${{ env.DEMOG_WHITELIST }}
        run: |
          set -euo pipefail
          if   [ -f "update_population.fr.py" ]; then PY="update_population.fr.py";
          elif [ -f "update_population_fr.py" ]; then PY="update_population_fr.py";
          elif [ -f "scripts/update_population.fr.py" ]; then PY="scripts/update_population.fr.py";
          elif [ -f "scripts/update_population_fr.py" ]; then PY="scripts/update_population_fr.py";
          else echo "↪️ FR nüfus scripti yok, adım atlandı."; exit 0; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/fr_crime_03.csv"
          test -f "$OUT" || { echo "❌ fr_crime_03.csv üretilmedi"; exit 2; }
          echo "---- fr_crime_03.csv (head) ----"
          head -n 5 "$OUT" || true
      
      # =========================
      # 05) BUS — SF önce, sonra FR (tek başlık)
      # =========================
      
      - name: "05) Bus • SF: update_bus → sf_crime_04.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # SF hattı: sadece SF scriptlerini dene
          if   [ -f "update_bus.py" ]; then PY="update_bus.py";
          elif [ -f "scripts/update_bus.py" ]; then PY="scripts/update_bus.py";
          else echo "❌ SF bus scripti bulunamadı"; exit 2; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/sf_crime_04.csv"
          if [ -f "$OUT" ]; then
            echo "---- sf_crime_04.csv (head) ----"; head -n 5 "$OUT" || true
          else
            echo "ℹ️ Beklenen çıktı yok: $OUT"
          fi
      
      - name: "05) Bus • FR: update_bus_fr → fr_crime_04.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('**/update_bus.fr.py', '**/update_bus_fr.py', 'scripts/update_bus.fr.py', 'scripts/update_bus_fr.py') != '') }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_bus.fr.py" ]; then PY="update_bus.fr.py";
          elif [ -f "update_bus_fr.py" ]; then PY="update_bus_fr.py";
          elif [ -f "scripts/update_bus.fr.py" ]; then PY="scripts/update_bus.fr.py";
          elif [ -f "scripts/update_bus_fr.py" ]; then PY="scripts/update_bus_fr.py";
          else echo "↪️ FR bus scripti yok, adım atlandı."; exit 0; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/fr_crime_04.csv"
          test -f "$OUT" || { echo "❌ fr_crime_04.csv üretilmedi"; exit 2; }
          echo "---- fr_crime_04.csv (head) ----"; head -n 5 "$OUT" || true

      # =========================
      # 06) TRAIN — SF önce, sonra FR (tek başlık)
      # =========================
      
      - name: "06) Train • SF: update_train → sf_crime_05.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # SF hattı: sadece SF scriptlerini dene
          if   [ -f "update_train.py" ]; then PY="update_train.py";
          elif [ -f "scripts/update_train.py" ]; then PY="scripts/update_train.py";
          else echo "❌ SF train scripti bulunamadı"; exit 2; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/sf_crime_05.csv"
          if [ -f "$OUT" ]; then
            echo "---- sf_crime_05.csv (head) ----"; head -n 5 "$OUT" || true
          else
            echo "ℹ️ Beklenen çıktı yok: $OUT"
          fi
      
      - name: "06) Train • FR: update_train_fr → fr_crime_05.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('**/update_train.fr.py', '**/update_train_fr.py', 'scripts/update_train.fr.py', 'scripts/update_train_fr.py') != '') }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_train.fr.py" ]; then PY="update_train.fr.py";
          elif [ -f "update_train_fr.py" ]; then PY="update_train_fr.py";
          elif [ -f "scripts/update_train.fr.py" ]; then PY="scripts/update_train.fr.py";
          elif [ -f "scripts/update_train_fr.py" ]; then PY="scripts/update_train_fr.py";
          else echo "↪️ FR train scripti yok, adım atlandı."; exit 0; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/fr_crime_05.csv"
          test -f "$OUT" || { echo "❌ fr_crime_05.csv üretilmedi"; exit 2; }
          echo "---- fr_crime_05.csv (head) ----"; head -n 5 "$OUT" || true

      # =========================
      # 07) POI — SF önce, sonra FR
      # =========================
      
      - name: "07) POI • SF: update_poi → sf_crime_06.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # SF hattı: SF öncelikli script sırası
          if   [ -f "update_poi.py" ]; then PY="update_poi.py";
          elif [ -f "pipeline_make_sf_crime_06.py" ]; then PY="pipeline_make_sf_crime_06.py";
          elif [ -f "scripts/update_poi.py" ]; then PY="scripts/update_poi.py";
          elif [ -f "scripts/pipeline_make_sf_crime_06.py" ]; then PY="scripts/pipeline_make_sf_crime_06.py";
          else echo "❌ SF POI scripti bulunamadı"; exit 2; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/sf_crime_06.csv"
          if [ -f "$OUT" ]; then
            echo "---- sf_crime_06.csv (head) ----"; head -n 5 "$OUT" || true
          else
            echo "ℹ️ Beklenen çıktı yok: $OUT"
          fi
      
      
      - name: "07) POI • FR: update_poi_fr → fr_crime_06.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('**/update_poi.fr.py', '**/update_poi_fr.py', 'scripts/update_poi.fr.py', 'scripts/update_poi_fr.py') != '') }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_poi.fr.py" ]; then PY="update_poi.fr.py";
          elif [ -f "update_poi_fr.py" ]; then PY="update_poi_fr.py";
          elif [ -f "scripts/update_poi.fr.py" ]; then PY="scripts/update_poi.fr.py";
          elif [ -f "scripts/update_poi_fr.py" ]; then PY="scripts/update_poi_fr.py";
          elif [ -f "update_poi.py" ]; then PY="update_poi.py";
          elif [ -f "scripts/pipeline_make_sf_crime_06.py" ]; then PY="scripts/pipeline_make_sf_crime_06.py";
          else echo "↪️ FR POI scripti yok, adım atlandı."; exit 0; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/fr_crime_06.csv"
          test -f "$OUT" || { echo "❌ fr_crime_06.csv üretilmedi"; exit 2; }
          echo "---- fr_crime_06.csv (head) ----"; head -n 5 "$OUT" || true

      # =========================
      # 08) Police & Government — SF önce, sonra FR
      # =========================
      
      - name: "08) Police/Gov • SF: enrich → sf_crime_07.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # SF hattı: SF odaklı script sırası
          if   [ -f "update_police_gov.py" ]; then PY="update_police_gov.py";
          elif [ -f "scripts/enrich_police_gov_06_to_07.py" ]; then PY="scripts/enrich_police_gov_06_to_07.py";
          else echo "❌ SF police/gov scripti bulunamadı"; exit 2; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/sf_crime_07.csv"
          if [ -f "$OUT" ]; then
            echo "---- sf_crime_07.csv (head) ----"; head -n 5 "$OUT" || true
          else
            echo "ℹ️ Beklenen çıktı yok: $OUT"
          fi
      
      - name: "08) Police/Gov • FR: enrich → fr_crime_07.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('**/update_police_gov.fr.py', '**/update_police_gov_fr.py', 'scripts/enrich_police_gov_06_to_07.fr.py', 'scripts/enrich_police_gov_06_to_07_fr.py') != '') }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          if   [ -f "update_police_gov.fr.py" ]; then PY="update_police_gov.fr.py";
          elif [ -f "update_police_gov_fr.py" ]; then PY="update_police_gov_fr.py";
          elif [ -f "scripts/enrich_police_gov_06_to_07.fr.py" ]; then PY="scripts/enrich_police_gov_06_to_07.fr.py";
          elif [ -f "scripts/enrich_police_gov_06_to_07_fr.py" ]; then PY="scripts/enrich_police_gov_06_to_07_fr.py";
          elif [ -f "update_police_gov.py" ]; then PY="update_police_gov.py";
          elif [ -f "scripts/enrich_police_gov_06_to_07.py" ]; then PY="scripts/enrich_police_gov_06_to_07.py";
          else echo "↪️ FR police/gov scripti yok, adım atlandı."; exit 0; fi
      
          python -u "$PY"
      
          OUT="${CRIME_DATA_DIR}/fr_crime_07.csv"
          test -f "$OUT" || { echo "❌ fr_crime_07.csv üretilmedi"; exit 2; }
          echo "---- fr_crime_07.csv (head) ----"; head -n 5 "$OUT" || true

      # =========================
      # 09) Weather — Yalnızca FR: arşiv + merge → fr_crime_08.csv
      # =========================
      
      - name: "09) Weather • FR only: archive & merge → fr_crime_08.csv (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PIPELINE_VARIANT == 'fr' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
      
          # 1) Weather arşivini üret
          if   [ -f "update_weather.py" ]; then PYW="update_weather.py";
          elif [ -f "scripts/update_weather.py" ]; then PYW="scripts/update_weather.py";
          else echo "❌ Weather script not found"; exit 2; fi
      
          python -u "$PYW"
      
          # 2) Arşiv dosyasını CRIME_DATA_DIR'e taşı ve head göster
          test -f "sf_weather_5years.csv" || { echo "❌ Beklenen çıktı yok: sf_weather_5years.csv"; exit 2; }
          mkdir -p "${CRIME_DATA_DIR}"
          cp -f sf_weather_5years.csv "${CRIME_DATA_DIR}/sf_weather_5years.csv"
          echo "---- sf_weather_5years.csv (head) ----"
          head -n 5 "${CRIME_DATA_DIR}/sf_weather_5years.csv" || true
      
          # 3) FR ile merge (tarih bazlı) → fr_crime_08.csv
          FR07="${CRIME_DATA_DIR}/fr_crime_07.csv"
          WX="${CRIME_DATA_DIR}/sf_weather_5years.csv"
          OUT="${CRIME_DATA_DIR}/fr_crime_08.csv"
      
          if [ ! -f "$FR07" ]; then
            echo "↪️ FR girdisi yok ($FR07). Weather merge atlandı."
            exit 0
          fi
      
          python - <<'PY'
          import os, sys
          import pandas as pd
          from datetime import datetime
      
          cdir = os.environ["CRIME_DATA_DIR"]
          fr_in = os.path.join(cdir, "fr_crime_07.csv")
          wx_in = os.path.join(cdir, "sf_weather_5years.csv")
          out   = os.path.join(cdir, "fr_crime_08.csv")
      
          def first_existing(df, candidates):
              low = {c.lower(): c for c in df.columns}
              for k in candidates:
                  if k.lower() in low:
                      return low[k.lower()]
              return None
      
          # FR verisini oku
          fr = pd.read_csv(fr_in, low_memory=False)
      
          # FR: tarih key'i bul (öncelik datetime sonra date)
          fr_dt_col = first_existing(fr, [
              "datetime","incident_datetime","ts","timestamp","date_time","event_datetime"
          ])
          fr_d_col  = first_existing(fr, [
              "date","incident_date","event_date","dt","day"
          ])
      
          if fr_dt_col:
              fr["_date_key"] = pd.to_datetime(fr[fr_dt_col], errors="coerce").dt.date
          elif fr_d_col:
              fr["_date_key"] = pd.to_datetime(fr[fr_d_col], errors="coerce").dt.date
          else:
              # Son çare: yıl/ay/gün kolonlarından oluştur
              y = first_existing(fr, ["year","y"])
              m = first_existing(fr, ["month","m"])
              d = first_existing(fr, ["day_of_month","day","d"])
              if y and m and d:
                  fr["_date_key"] = pd.to_datetime(fr[[y,m,d]].rename(columns={y:"y",m:"m",d:"d"}), errors="coerce").apply(
                      lambda r: datetime(int(r["y"]), int(r["m"]), int(r["d"])).date() if pd.notnull(r["y"]) and pd.notnull(r["m"]) and pd.notnull(r["d"]) else pd.NaT,
                      axis=1
                  )
              else:
                  print("❌ FR tarih alanı bulunamadı; merge yapılamıyor.")
                  sys.exit(2)
      
          # Weather verisini oku
          wx = pd.read_csv(wx_in, low_memory=False)
          # Weather: tarih key'i bul
          wx_dt_col = first_existing(wx, ["datetime","timestamp","date_time"])
          wx_d_col  = first_existing(wx, ["date","day","valid_date","time"])
      
          if wx_dt_col:

      # =========================
      # 10) Neighbors — SF & FR: en zengin CSV'lerle devam
      # =========================
      
      # SF: sf_crime_07.csv  →  sf_crime_08.csv
      - name: "10) Neighbors • SF: 07 → 08 (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          SRC="${CRIME_DATA_DIR}/sf_crime_07.csv"
          DST="${CRIME_DATA_DIR}/sf_crime_08.csv"
          test -f "$SRC" || { echo "❌ Girdi eksik: $SRC"; exit 2; }
      
          echo "---- SF input (head) ----"; head -n 5 "$SRC" || true
          echo "▶︎ SF komşuluk zenginleştirme başlıyor: $SRC → $DST"
      
          if [ -f "scripts/make_neighbors.py" ]; then
            python -u scripts/make_neighbors.py --in "$SRC" --out "$DST" || python -u scripts/make_neighbors.py
          elif [ -f "make_neigbors.py" ]; then
            python -u make_neigbors.py --in "$SRC" --out "$DST" || python -u make_neigbors.py
          else
            echo "❌ scripts/make_neighbors.py bulunamadı"; exit 2
          fi
      
          test -f "$DST" || { echo "❌ Beklenen çıktı yok: $DST"; exit 2; }
          echo "---- sf_crime_08.csv (head) ----"; head -n 5 "$DST" || true
      
      
      # FR: fr_crime_08.csv  →  fr_crime_09.csv
      #     fr_crime_08 yoksa fr_crime_07.csv'den devam (fallback)
      - name: "10) Neighbors • FR: 08/07 → 09 (head)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('scripts/make_neighbors_fr.py','make_neigbors_fr.py','scripts/make_neighbors.py','make_neigbors.py') != '') }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          # En zengin FR girdisini seç: önce fr_crime_08 (weather'lı), yoksa fr_crime_07
          SRC_08="${CRIME_DATA_DIR}/fr_crime_08.csv"
          SRC_07="${CRIME_DATA_DIR}/fr_crime_07.csv"
          if   [ -f "$SRC_08" ]; then SRC="$SRC_08";
          elif [ -f "$SRC_07" ]; then SRC="$SRC_07";
          else echo "↪️ FR girdi bulunamadı (ne $SRC_08 ne de $SRC_07 mevcut). Adım atlandı."; exit 0; fi
      
          DST="${CRIME_DATA_DIR}/fr_crime_09.csv"
          echo "---- FR input (head) ----"; head -n 5 "$SRC" || true
          echo "▶︎ FR komşuluk zenginleştirme: $SRC → $DST"
      
          # FR'ye özgü script varsa onu kullan; yoksa generic komşuluk scriptine düş
          if   [ -f "scripts/make_neighbors_fr.py" ]; then PY="scripts/make_neighbors_fr.py";
          elif [ -f "make_neigbors_fr.py" ]; then PY="make_neigbors_fr.py";
          elif [ -f "scripts/make_neighbors.py" ]; then PY="scripts/make_neighbors.py";
          elif [ -f "make_neigbors.py" ]; then PY="make_neigbors.py";
          else echo "❌ FR neighbors scripti bulunamadı"; exit 2; fi
      
          python -u "$PY" --in "$SRC" --out "$DST" || python -u "$PY"
      
          test -f "$DST" || { echo "❌ Beklenen çıktı yok: $DST"; exit 2; }
          echo "---- fr_crime_09.csv (head) ----"; head -n 5 "$DST" || true


      # =========================
      # 11) Feature Analysis (EDA) — SF önce, sonra FR (tek başlık)
      # =========================
      
      - name: "11) EDA • SF: unified_feature_analysis → outputs_feature_analysis/sf_08 (heads)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          SF_IN="${CRIME_DATA_DIR}/sf_crime_08.csv"
          OUTDIR="outputs_feature_analysis/sf_08"
      
          if [ -f "${SF_IN}" ]; then
            echo "---- SF EDA input (head) ----"; head -n 5 "${SF_IN}" || true
            echo "▶︎ SF EDA başlıyor: ${SF_IN} → ${OUTDIR}"
            if   [ -f "unified_feature_analysis.py" ]; then PY="unified_feature_analysis.py";
            elif [ -f "scripts/unified_feature_analysis.py" ]; then PY="scripts/unified_feature_analysis.py";
            else echo "❌ unified_feature_analysis.py bulunamadı"; exit 2; fi
      
            python -u "$PY" --csv "${SF_IN}" --outdir "${OUTDIR}"
            echo "✅ SF EDA tamamlandı."
      
            # Çıktıları göster
            if [ -d "${OUTDIR}" ]; then
              echo "---- SF EDA output list ----"
              find "${OUTDIR}" -maxdepth 2 -type f | sort | sed -e 's|^|  • |'
              # varsa ilk CSV'nin head'i
              CSV="$(find "${OUTDIR}" -type f -name '*.csv' | head -n 1 || true)"
              if [ -n "$CSV" ]; then
                echo "---- $(basename "$CSV") (head) ----"; head -n 5 "$CSV" || true
              fi
            fi
          else
            echo "↪️ ${SF_IN} bulunamadı, SF EDA atlandı."
          fi
      
      - name: "11) EDA • FR: unified_feature_analysis → outputs_feature_analysis/fr_09 (heads)"
        if: ${{ steps.gate.outputs.proceed == 'true' && (env.PIPELINE_VARIANT == 'fr' || hashFiles('unified_feature_analysis.py','scripts/unified_feature_analysis.py') != '') }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          FR_IN="${CRIME_DATA_DIR}/fr_crime_09.csv"
          OUTDIR="outputs_feature_analysis/fr_09"
      
          if [ -f "${FR_IN}" ]; then
            echo "---- FR EDA input (head) ----"; head -n 5 "${FR_IN}" || true
            echo "▶︎ FR EDA başlıyor: ${FR_IN} → ${OUTDIR}"
            if   [ -f "unified_feature_analysis.py" ]; then PY="unified_feature_analysis.py";
            elif [ -f "scripts/unified_feature_analysis.py" ]; then PY="scripts/unified_feature_analysis.py";
            else echo "❌ unified_feature_analysis.py bulunamadı"; exit 2; fi
      
            python -u "$PY" --csv "${FR_IN}" --outdir "${OUTDIR}"
            echo "✅ FR EDA tamamlandı."
      
            # Çıktıları göster
            if [ -d "${OUTDIR}" ]; then
              echo "---- FR EDA output list ----"
              find "${OUTDIR}" -maxdepth 2 -type f | sort | sed -e 's|^|  • |'
              CSV="$(find "${OUTDIR}" -type f -name '*.csv' | head -n 1 || true)"
              if [ -n "$CSV" ]; then
                echo "---- $(basename "$CSV") (head) ----"; head -n 5 "$CSV" || true
              fi
            fi
          else
            echo "↪️ ${FR_IN} bulunamadı, FR EDA atlandı."
          fi

      # =========================
      # 12) QC + Quick Preview — SF(08) önce, FR(09) sonra (tek başlık)
      # =========================
      - name: "12) QC & Preview • SF(08) + FR(09)"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail

          bytes() {
            # Linux: stat -c%s, macOS: stat -f%z
            stat -c%s "$1" 2>/dev/null || stat -f%z "$1" 2>/dev/null || echo "?"
          }

          preview_csv() {
            local FILE="$1"
            local LABEL="$2"
            if [ -f "$FILE" ]; then
              local SIZE; SIZE=$(bytes "$FILE")
              local LINES; LINES=$(wc -l < "$FILE" 2>/dev/null || echo "?")
              echo "✅ ${LABEL} Var: $FILE | boyut=${SIZE} byte | satır≈${LINES}"

              # Python ile kolon sayısı + ilk birkaç kolon adını göster
              TARGET_FILE="$FILE" python - <<'PY' || true
              import os
              import pandas as pd

              p = os.environ.get("TARGET_FILE", "")
              try:
                  df = pd.read_csv(p, nrows=1000, low_memory=False)
                  cols = list(df.columns)
                  print(f"Kolon sayısı: {len(cols)} | İlk kolonlar: {cols[:min(8,len(cols))]}")
              except Exception as e:
                  print(f"[info] kolon bilgisi okunamadı: {e}")
              PY

              echo "---- $(basename "$FILE") (head 5) ----"
              head -n 5 "$FILE" || true
            else
              echo "ℹ️ ${LABEL} Yok: $FILE"
            fi
          }

          # SF
          preview_csv "${CRIME_DATA_DIR}/sf_crime_08.csv" "SF(08)"

          echo

          # FR
          preview_csv "${CRIME_DATA_DIR}/fr_crime_09.csv" "FR(09)"

      # =========================
      # 13) Package — SF(08) & FR(09) + ana CSV'ler (head'lerle)
      # =========================
      - name: "13) Package • Build paquet (zip) + preview"
        if: ${{ steps.gate.outputs.proceed == 'true' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
      
          PKG_DIR="_pkg"
          mkdir -p "$PKG_DIR"
      
          # Kopyala & önizleme yardımcıları
          bytes() { stat -c%s "$1" 2>/dev/null || stat -f%z "$1" 2>/dev/null || echo "?"; }
          add_file() {
            local SRC="$1"
            local DSTDIR="$2"
            if [ -f "$SRC" ]; then
              cp -f "$SRC" "$DSTDIR/"
              local SIZE; SIZE=$(bytes "$SRC")
              echo "✅ Eklendi: $SRC  | boyut=${SIZE} byte"
              echo "---- $(basename "$SRC") (head 5) ----"
              head -n 5 "$SRC" || true
            else
              echo "ℹ️ Dosya yok, atlandı: $SRC"
            fi
          }
      
          echo "▶︎ Paketleme başlıyor…"
      
          # Ana CSV'ler (SF & FR en zenginler)
          add_file "${CRIME_DATA_DIR}/sf_crime.csv"        "$PKG_DIR"
          add_file "${CRIME_DATA_DIR}/sf_crime_08.csv"     "$PKG_DIR"   # SF neighbors sonrası
          add_file "${CRIME_DATA_DIR}/fr_crime_09.csv"     "$PKG_DIR"   # FR neighbors + (varsa) weather sonrası
          # Ek yararlı çıktılar
          add_file "${CRIME_DATA_DIR}/fr_crime_08.csv"     "$PKG_DIR"   # FR weather merge sonrası (opsiyonel)
          add_file "${CRIME_DATA_DIR}/sf_weather_5years.csv" "$PKG_DIR" # Weather arşivi (bilgi amaçlı)
      
          # GEOID-Y_label özetleri (wildcard)
          # shellcheck disable=SC2086
          cp -f ${CRIME_DATA_DIR}/sf_crime_L*.csv "$PKG_DIR/" 2>/dev/null || true
          if ls ${CRIME_DATA_DIR}/sf_crime_L*.csv >/dev/null 2>&1; then
            echo "✅ Eklendi: sf_crime_L*.csv seti"
            for f in ${CRIME_DATA_DIR}/sf_crime_L*.csv; do
              [ -f "$f" ] || continue
              echo "---- $(basename "$f") (head 5) ----"
              head -n 5 "$f" || true
            done
          fi
      
          # FR EDA çıktıları (varsa)
          if [ -d "outputs_feature_analysis/fr_09" ]; then
            mkdir -p "$PKG_DIR/fr_eda"
            cp -rf outputs_feature_analysis/fr_09/* "$PKG_DIR/fr_eda/" || true
            echo "✅ Eklendi: outputs_feature_analysis/fr_09 → _pkg/fr_eda/"
          else
            echo "ℹ️ FR EDA klasörü yok: outputs_feature_analysis/fr_09"
          fi
      
          echo "----- Paket içeriği (liste) -----"
          ls -lah "$PKG_DIR" || true
          [ -d "$PKG_DIR/fr_eda" ] && { echo "----- fr_eda/ -----"; ls -lah "$PKG_DIR/fr_eda" || true; }
      
          # ZIP oluştur
          ZIP_NAME="paquet_run_${GITHUB_RUN_NUMBER}.zip"
          (cd "$PKG_DIR" && zip -r "../${ZIP_NAME}" . >/dev/null || true)
          echo "🎁 ZIP oluşturuldu: ${ZIP_NAME}"-

      # =========================
      # 14) Persist — artifact / commit / release
      # =========================
      
      # 14a) Artifact: paket zip + ana CSV'ler + FR EDA (opsiyonel ekler: fr_crime_08, weather)
      - name: "14a) Upload artifacts (paquet + EDA + CSVs)"
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PERSIST_MODE == 'artifact' }}
        uses: actions/upload-artifact@v4
        with:
          name: sf-crime-pipeline-output
          if-no-files-found: warn
          path: |
            paquet_run_${{ github.run_number }}.zip
            ${{ env.CRIME_DATA_DIR }}/sf_crime.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_08.csv
            ${{ env.CRIME_DATA_DIR }}/fr_crime_09.csv
            ${{ env.CRIME_DATA_DIR }}/fr_crime_08.csv
            ${{ env.CRIME_DATA_DIR }}/sf_weather_5years.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_L*.csv
            outputs_feature_analysis/fr_09/**
            outputs_feature_analysis/sf_08/**
      
      # 14b) Commit: FR çıktıları + ana CSV'ler (zip commit edilmez)
      - name: "14b) Commit outputs to repo"
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PERSIST_MODE == 'commit' }}
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
          # FR EDA + ana CSV'ler (opsiyoneller dahil)
          git add -A \
            outputs_feature_analysis/fr_09 \
            "${CRIME_DATA_DIR}/fr_crime_09.csv" \
            "${CRIME_DATA_DIR}/sf_crime.csv" \
            "${CRIME_DATA_DIR}/sf_crime_08.csv" \
            "${CRIME_DATA_DIR}/fr_crime_08.csv" \
            "${CRIME_DATA_DIR}/sf_weather_5years.csv" \
            ${CRIME_DATA_DIR}/sf_crime_L*.csv 2>/dev/null || true
      
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Pipeline outputs (EDA + key CSVs) [run $GITHUB_RUN_NUMBER]"
            git push
          fi
      
      # 14c) Release: zip + EDA + ana CSV'ler
      - name: "14c) Release FR/SF outputs (zip dahil)"
        if: ${{ steps.gate.outputs.proceed == 'true' && env.PERSIST_MODE == 'release' }}
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          tag_name: pipeline-${{ github.run_number }}
          name: "Pipeline Outputs #${{ github.run_number }}"
          files: |
            paquet_run_${{ github.run_number }}.zip
            outputs_feature_analysis/fr_09/**/*
            outputs_feature_analysis/sf_08/**/*
            ${{ env.CRIME_DATA_DIR }}/fr_crime_09.csv
            ${{ env.CRIME_DATA_DIR }}/fr_crime_08.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_08.csv
            ${{ env.CRIME_DATA_DIR }}/sf_crime_L*.csv
            ${{ env.CRIME_DATA_DIR }}/sf_weather_5years.csv

