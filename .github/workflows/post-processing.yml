name: Post Processing (FR)

on:
  workflow_run:
    workflows: ["Full SF Crime Pipeline"]   # upstream workflow adƒ±
    types: [completed]
    branches: [main]

permissions:
  contents: read
  actions: read

jobs:
  run_fr:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      CRIME_DATA_DIR: crime_prediction_data
      WX_LOCATION: "paris"
      WX_UNIT: "metric"
      GEOID_LEN: "11"

      # Artifact-first okuma/yazma i√ßin ENV
      ARTIFACT_ZIP: artifact/sf-crime-pipeline-output.zip
      ARTIFACT_DIR: artifact
      FR_OUTPUT_DIR: ${{ github.workspace }}/crime_prediction_data
      FALLBACK_DIRS: ${{ github.workspace }}/crime_prediction_data,${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - name: Ensure data dir (FR)
        run: mkdir -p "${CRIME_DATA_DIR}"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps (quick)
        run: |
          python -m pip install -U pip wheel setuptools
          [ -f requirements.txt ] && pip install -r requirements.txt || true

      # ‚¨áÔ∏è Upstream pipeline artifact'ƒ±nƒ± tetikleyen run'dan indir
      - name: Download upstream artifact (triggering run)
        uses: dawidd6/action-download-artifact@v6
        with:
          run_id: ${{ github.event.workflow_run.id }}   # üëà tetikleyen run
          name: sf-crime-pipeline-output
          path: artifact

      # (Opsiyonel) Eƒüer bazƒ± adƒ±mlar ZIP bekliyorsa:
      - name: Unzip artifact if present (optional)
        run: |
          set -e
          if [ -f "${{ env.ARTIFACT_ZIP }}" ]; then
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y unzip >/dev/null
            unzip -o "${{ env.ARTIFACT_ZIP }}" -d "${{ env.ARTIFACT_DIR }}"
          else
            echo "No artifact ZIP file found (this is fine)."
          fi

      - name: FR 00) Base grid / event label merge
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_crime_fr.py
          head -n 5 "${CRIME_DATA_DIR}/sf_crime_grid_full_labeled.csv" || true

      - name: FR 01) 911
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_911_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_01.csv" || true

      - name: FR 02) 311
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_311_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_02.csv" || true

      - name: FR 03) Population
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_population_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_03.csv" || true

      - name: FR 04) Bus
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_bus_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_04.csv" || true

      - name: FR 05) Train
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_train_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_05.csv" || true

      - name: FR 06) POI
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_poi_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_06.csv" || true

      - name: FR 07) Police & Gov
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_police_gov_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_07.csv" || true

      - name: FR 08) Weather
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_weather_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_08.csv" || true

      - name: FR 09) Neighbors
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
        run: |
          set -e
          # Betik yolunu bul
          if [ -f scripts/make_neighbors_fr.py ]; then
            PY=scripts/make_neighbors_fr.py
          elif [ -f make_neighbors_fr.py ]; then
            PY=make_neighbors_fr.py
          else
            echo "‚ö†Ô∏è make_neighbors_fr.py bulunamadƒ±, adƒ±m atlanƒ±yor."
            exit 0
          fi
          # Girdiler kabaca mevcut mu? (opsiyonel uyarƒ±)
          test -f "${CRIME_DATA_DIR}/fr_crime_08.csv" || echo "‚ö†Ô∏è fr_crime_08.csv yok (devam edilebilir)."

          python -u "$PY" || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_09.csv" || true

      # Parquet motorunu kur
      - name: Install parquet engine
        run: |
          python -m pip install -U pyarrow

      # ‚úÖ CSV'leri Parquet'e √ßevir ve hem CSV hem Parquet'i tek bir ZIP'e topla
      - name: FR 12) Convert outputs to Parquet & ZIP
        env:
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
        run: |
          set -e
          python - <<'PY'
          import os, glob, sys, zipfile
          from pathlib import Path
          import pandas as pd

          base = os.environ.get("CRIME_DATA_DIR","crime_prediction_data")
          extra = os.environ.get("ARTIFACT_DIR","artifact")
          out_zip = Path(base) / "fr_outputs_parquet.zip"

          def files_in(dirpath, pattern):
            if not os.path.isdir(dirpath): return []
            return sorted(glob.glob(os.path.join(dirpath, pattern)))

          # 1) CSV -> Parquet d√∂n√º≈üt√ºr
          converted_parquets = []
          for folder in [base, extra]:
            for fp in files_in(folder, "*.csv"):
              pq_path = Path(fp).with_suffix(".parquet")
              try:
                df = pd.read_csv(fp, low_memory=False)
                df.to_parquet(pq_path, index=False)  # pyarrow
                print(f"‚Üí parquet yazƒ±ldƒ±: {pq_path}")
                converted_parquets.append(str(pq_path))
              except Exception as e:
                print(f"skip (csv->parquet) {fp}: {e}", file=sys.stderr)

          # 2) ZIP'e hem CSV hem Parquet ekle (g√∂reli yolu koru)
          to_zip = set()
          for folder in [base, extra]:
            for patt in ("*.csv","*.parquet"):
              for fp in files_in(folder, patt):
                to_zip.add(fp)

          with zipfile.ZipFile(out_zip, "w", compression=zipfile.ZIP_DEFLATED) as z:
            for fp in sorted(to_zip):
              p = Path(fp)
              try:
                # crime_prediction_data altƒ±nda ise g√∂reli yolu koru
                arcname = p.relative_to(base) if str(p).startswith(str(Path(base))) else p.name
              except Exception:
                arcname = p.name
              z.write(fp, arcname=str(arcname))
              print(f"+ ZIP'e eklendi: {arcname}")

          print(f"‚úÖ ZIP hazƒ±r: {out_zip} (toplam {len(to_zip)} dosya)")
          PY

      - name: Upload FR pipeline outputs
        uses: actions/upload-artifact@v4
        with:
          name: fr-crime-pipeline-output
          path: |
            ${{ env.CRIME_DATA_DIR }}/sf_crime_grid_full_labeled.csv
            ${{ env.CRIME_DATA_DIR }}/fr_crime_0*.csv
            ${{ env.CRIME_DATA_DIR }}/fr_crime_10.csv
            ${{ env.CRIME_DATA_DIR }}/*.parquet
            ${{ env.CRIME_DATA_DIR }}/neighbors.csv
            ${{ env.CRIME_DATA_DIR }}/risk_hourly*.csv
            ${{ env.CRIME_DATA_DIR }}/patrol_recs*.csv
            ${{ env.CRIME_DATA_DIR }}/metrics_*.csv
          if-no-files-found: warn
          retention-days: 14
