name: Post Processing (FR)

on:
  workflow_run:
    workflows: ["Full SF Crime Pipeline"]
    types: [completed]
    branches: [main]

permissions:
  contents: read
  actions: read

concurrency:
  group: post-processing-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run_fr:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      CRIME_DATA_DIR: crime_prediction_data
      WX_LOCATION: "paris"
      WX_UNIT: "metric"
      GEOID_LEN: "11"

      ARTIFACT_ZIP: artifact/sf-crime-pipeline-output.zip
      ARTIFACT_DIR: artifact
      FR_OUTPUT_DIR: ${{ github.workspace }}/crime_prediction_data
      FALLBACK_DIRS: ${{ github.workspace }}/crime_prediction_data,${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - name: Ensure data dir (FR)
        run: mkdir -p "${CRIME_DATA_DIR}"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps (quick)
        run: |
          python -m pip install -U pip wheel setuptools
          [ -f requirements.txt ] && pip install -r requirements.txt || true

      - name: Install parquet engine
        run: |
          python -m pip install -U pyarrow pandas

      - name: Download upstream artifact (triggering run)
        uses: dawidd6/action-download-artifact@v6
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: sf-crime-pipeline-output
          path: artifact

      - name: Unzip artifact if present (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "${{ env.ARTIFACT_ZIP }}" ]; then
            command -v unzip >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null && sudo apt-get install -y unzip >/dev/null; }
            unzip -o "${{ env.ARTIFACT_ZIP }}" -d "${{ env.ARTIFACT_DIR }}"
          else
            echo "No artifact ZIP file found (this is fine)."
          fi

      # --- FR 00..09: Mevcut üretim adımların (fr_crime_09'a kadar) ---
      - name: FR 00) Base grid / event label merge
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_crime_fr.py
          head -n 5 "${CRIME_DATA_DIR}/sf_crime_grid_full_labeled.csv" || true

      - name: FR 01) 911
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_911_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_01.csv" || true

      - name: FR 02) 311
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_311_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_02.csv" || true

      - name: FR 03) Population
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_population_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_03.csv" || true

      - name: FR 04) Bus
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_bus_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_04.csv" || true

      - name: FR 05) Train
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_train_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_05.csv" || true

      - name: FR 06) POI
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_poi_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_06.csv" || true

      - name: FR 07) Police & Gov
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_police_gov_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_07.csv" || true

      - name: FR 08) Weather
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail
          python -u update_weather_fr.py || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_08.csv" || true

      - name: FR 09) Neighbors
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
        run: |
          set -euo pipefail
          if [ -f scripts/make_neighbors_fr.py ]; then
            PY=scripts/make_neighbors_fr.py
          elif [ -f make_neighbors_fr.py ]; then
            PY=make_neighbors_fr.py
          else
            echo "⚠️ make_neighbors_fr.py bulunamadı, adım atlanıyor."
            exit 0
          fi
          test -f "${CRIME_DATA_DIR}/fr_crime_08.csv" || echo "⚠️ fr_crime_08.csv yok (devam edilebilir)."
          python -u "$PY" || true
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_09.csv" || true

      # --- DİKKAT: FR 10 kaldırıldı; fr_crime_10 üretilmez/dahil edilmez ---

      - name: FR 12) Build 2 ZIPs with EXACT files (no fr_crime_10)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, zipfile
          from pathlib import Path
          import pandas as pd

          base = Path(os.environ.get("CRIME_DATA_DIR","crime_prediction_data"))
          extra = Path(os.environ.get("ARTIFACT_DIR","artifact"))
          base.mkdir(parents=True, exist_ok=True)
          extra.mkdir(parents=True, exist_ok=True)

          # Hedef setler
          WANT_CSV = ["fr_crime_09.csv", "risk_hourly.csv", "metrics_stacking_ohe.csv"]
          WANT_PQ  = ["fr_crime_09.parquet", "risk_hourly.parquet", "metrics_stacking_ohe.parquet"]

          def find_one(name: str):
            # Önce base, sonra artifact
            for root in (base, extra):
              p = next(root.rglob(name), None)
              if p: return p
            return None

          # --- fr_crime_09 her iki formatta da olsun (gerekirse dönüşüm) ---
          csv_09 = find_one("fr_crime_09.csv")
          pq_09  = find_one("fr_crime_09.parquet")

          if csv_09 is None and pq_09 is None:
            print("❌ fr_crime_09.(csv|parquet) bulunamadı, üretim adımlarını kontrol edin.", file=sys.stderr)
            sys.exit(1)

          # Sadece CSV varsa → Parquet üret
          if pq_09 is None and csv_09 is not None:
            try:
              df = pd.read_csv(csv_09, low_memory=False)
              pq_09 = csv_09.with_suffix(".parquet")
              df.to_parquet(pq_09, index=False)
              print(f"[MAKE] {pq_09.name} from {csv_09.name}")
            except Exception as e:
              print(f"[WARN] fr_crime_09.parquet üretilemedi: {e}", file=sys.stderr)

          # Sadece Parquet varsa → CSV üret
          if csv_09 is None and pq_09 is not None:
            try:
              df = pd.read_parquet(pq_09)
              csv_09 = pq_09.with_suffix(".csv")
              df.to_csv(csv_09, index=False)
              print(f"[MAKE] {csv_09.name} from {pq_09.name}")
            except Exception as e:
              print(f"[WARN] fr_crime_09.csv üretilemedi: {e}", file=sys.stderr)

          # Seçilecek dosyaları topla (fr_crime_10 asla eklenmez)
          sel_csv = []
          sel_pq  = []

          def add_if_exists(target_list, name):
            p = find_one(name)
            if p is not None and "fr_crime_10" not in p.name:
              target_list.append(p)

          for n in WANT_CSV: add_if_exists(sel_csv, n)
          for n in WANT_PQ:  add_if_exists(sel_pq,  n)

          # Minimum: fr_crime_09 her iki listede de olmalı
          if not any(p.name == "fr_crime_09.csv" for p in sel_csv):
            if csv_09 is not None: sel_csv.append(csv_09)
          if not any(p.name == "fr_crime_09.parquet" for p in sel_pq):
            if pq_09 is not None: sel_pq.append(pq_09)

          # Paketleme
          out_csv_zip = base / "fr_csv_outputs.zip"
          out_pq_zip  = base / "fr_parquet_outputs.zip"

          def arcname_for(p: Path):
            try:
              if p.resolve().as_posix().startswith(base.resolve().as_posix()):
                return p.relative_to(base)
              if p.resolve().as_posix().startswith(extra.resolve().as_posix()):
                return Path("artifact") / p.relative_to(extra)
            except Exception:
              pass
            return Path(p.name)

          # CSV ZIP
          with zipfile.ZipFile(out_csv_zip, "w", compression=zipfile.ZIP_DEFLATED) as z:
            for p in sel_csv:
              z.write(p, arcname=str(arcname_for(p)))
              print(f"+ CSV: {p.name}")
          print(f"✅ CSV ZIP hazır: {out_csv_zip}")

          # PARQUET ZIP
          with zipfile.ZipFile(out_pq_zip, "w", compression=zipfile.ZIP_DEFLATED) as z:
            for p in sel_pq:
              z.write(p, arcname=str(arcname_for(p)))
              print(f"+ PQ: {p.name}")
          print(f"✅ Parquet ZIP hazır: {out_pq_zip}")
          PY

      - name: Upload FR outputs (CSV ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: fr-crime-outputs-csv
          path: ${{ env.CRIME_DATA_DIR }}/fr_csv_outputs.zip
          if-no-files-found: error
          retention-days: 14

      - name: Upload FR outputs (Parquet ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: fr-crime-outputs-parquet
          path: ${{ env.CRIME_DATA_DIR }}/fr_parquet_outputs.zip
          if-no-files-found: error
          retention-days: 14
