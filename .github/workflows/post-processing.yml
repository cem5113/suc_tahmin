# .github/workflows/post-processing.yml
name: Post Processing (FR)

on:
  workflow_run:
    workflows: ["Full SF Crime Pipeline"]
    types: [completed]
    branches: [main]

permissions:
  contents: read
  actions: read

concurrency:
  group: post-processing-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run_fr:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      CRIME_DATA_DIR: crime_prediction_data
      GEOID_LEN: "11"
      WX_LOCATION: "paris"
      WX_UNIT: "metric"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure data dir
        run: mkdir -p "${CRIME_DATA_DIR}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps (minimal)
        run: |
          python -m pip install -U pip wheel setuptools
          # Repo requirements varsa yükle, yoksa temel set
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -U pandas pyarrow polars

      # --- FR ÇIKTILARI ÜRET ---
      # Burada "update_forecast_crime.py" sizin FR tahmin/post-process scriptinizdir.
      # Eğer farklı isim/yol kullanıyorsanız, aşağıdaki blokta onunla değiştirin.
      - name: FR) Build forecast & metrics (CSV/Parquet üret)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          WX_LOCATION: ${{ env.WX_LOCATION }}
          WX_UNIT: ${{ env.WX_UNIT }}
          GEOID_LEN: ${{ env.GEOID_LEN }}
        shell: bash
        run: |
          set -euo pipefail

          echo "→ FR forecast & post-processing başlıyor..."
          # Script yolunu akıllı bul:
          if [ -f update_forecast_crime.py ]; then
            PY=update_forecast_crime.py
          elif [ -f scripts/update_forecast_crime.py ]; then
            PY=scripts/update_forecast_crime.py
          else
            echo "❌ update_forecast_crime.py bulunamadı. Lütfen repo kökünde veya scripts/ altında bulundurun."
            exit 1
          fi

          # Scriptinizi parametreliyorsanız burada örn:
          # python -u "$PY" --city paris --unit metric --outdir "${CRIME_DATA_DIR}"
          # Parametresiz çalışıyorsa:
          python -u "$PY"

          echo "→ Script tamamlandı. Üretilen dosyalar:"
          ls -lah "${CRIME_DATA_DIR}" || true

      # --- CSV VARSA PARQUET'E ÇEVİR (eksikleri tamamla) ---
      - name: Ensure Parquet variants for 3 targets
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          py() { python - "$@"; }

          ensure_parquet () {
            local stem="$1"  # örn: fr_crime_09, metrics_base_ohe, risk_hourly
            local base="${CRIME_DATA_DIR}/${stem}"
            local csv="${base}.csv"
            local pq="${base}.parquet"
            if [ -f "${pq}" ]; then
              echo "✅ ${pq} zaten mevcut."
              return 0
            fi
            if [ -f "${csv}" ]; then
              echo "→ ${csv} → ${pq} dönüştürülüyor..."
              py <<PY
import pandas as pd, os
src = os.environ["CSV"]
dst = os.environ["PQ"]
df = pd.read_csv(src)
df.to_parquet(dst, index=False)
print("Wrote:", dst)
PY
            else
              echo "ℹ️ ${stem}.(csv|parquet) bulunamadı (atlandı)."
            fi
          }

          export CSV PQ
          CSV=""; PQ=""
          for stem in fr_crime_09 metrics_base_ohe risk_hourly; do
            CSV="${CRIME_DATA_DIR}/${stem}.csv"
            PQ="${CRIME_DATA_DIR}/${stem}.parquet"
            ensure_parquet "${stem}"
          done

      # --- SADECE 3 DOSYAYI TOPLA ---
      - name: Collect 3 outputs (don't fail if some missing)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p selected_outputs

          copy_if_exist () {
            local p="$1"
            if [ -f "$p" ]; then
              cp -v "$p" selected_outputs/
              return 0
            fi
            return 1
          }

          FOUND=0
          for p in \
            "${CRIME_DATA_DIR}/fr_crime_09.parquet" \
            "${CRIME_DATA_DIR}/metrics_base_ohe.parquet" \
            "${CRIME_DATA_DIR}/risk_hourly.parquet"
          do
            if copy_if_exist "$p"; then FOUND=1; fi
          done

          echo "→ Seçilen dosyalar:"
          ls -lh selected_outputs || true

          if [ $FOUND -eq 0 ]; then
            echo "❌ Beklenen 3 çıktıdan hiçbiri bulunamadı."
            echo "İpucu: update_forecast_crime.py çıktı yollarını ${CRIME_DATA_DIR} altına yazmalı."
            exit 1
          fi

      # --- ARTEFAKT UPLOAD: VAR OLANI YÜKLE ---
      - name: Upload fr_crime_09.parquet (if present)
        uses: actions/upload-artifact@v4
        with:
          name: fr_crime_09.parquet
          path: selected_outputs/fr_crime_09.parquet
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload metrics_base_ohe.parquet (if present)
        uses: actions/upload-artifact@v4
        with:
          name: metrics_base_ohe.parquet
          path: selected_outputs/metrics_base_ohe.parquet
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload risk_hourly.parquet (if present)
        uses: actions/upload-artifact@v4
        with:
          name: risk_hourly.parquet
          path: selected_outputs/risk_hourly.parquet
          if-no-files-found: ignore
          retention-days: 14

      - name: Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## Post Processing (FR)"
            echo ""
            echo "- Çalışma zamanı: **$(date)**"
            echo "- Çıktılar: fr_crime_09.parquet, metrics_base_ohe.parquet, risk_hourly.parquet (mevcut olanlar yüklendi)"
            echo "- Dizin: \`${{ env.CRIME_DATA_DIR }}\`"
          } >> $GITHUB_STEP_SUMMARY
