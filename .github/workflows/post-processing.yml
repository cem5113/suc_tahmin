name: Post Processing (FR)

on:
  workflow_run:
    workflows: ["Full SF Crime Pipeline"]
    types: [completed]
    branches: [main]

permissions:
  contents: read
  actions: read

jobs:
  run_fr:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      CRIME_DATA_DIR: crime_prediction_data
      WX_LOCATION: "paris"
      WX_UNIT: "metric"
      GEOID_LEN: "11"

      ARTIFACT_ZIP: artifact/sf-crime-pipeline-output.zip
      ARTIFACT_DIR: artifact
      FR_OUTPUT_DIR: ${{ github.workspace }}/crime_prediction_data
      FALLBACK_DIRS: ${{ github.workspace }}/crime_prediction_data,${{ github.workspace }}

      # Release fallback’ta indirilmesini istediğin varlık adları (gerekirse değiştir)
      RELEASE_ASSETS: "fr_parquet_outputs.zip,fr_csv_outputs.zip,sf-crime-pipeline-output.zip"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure data dir (FR)
        run: mkdir -p "${CRIME_DATA_DIR}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install core deps (pip + project requirements if present)
        run: |
          set -e
          python -m pip install -U pip wheel setuptools
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Install parquet engine
        run: |
          set -e
          python -m pip install -U pyarrow pandas

      - name: Install OS tools (zip/unzip/find)
        run: |
          set -e
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y unzip zip >/dev/null

      # ─────────────────────────────────────────────────────────────────────
      # 1) Tetikleyen run'dan artifact indir
      # ─────────────────────────────────────────────────────────────────────
      - name: Download upstream artifact (triggering run)
        uses: dawidd6/action-download-artifact@v6
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: sf-crime-pipeline-output
          path: artifact
        continue-on-error: true

      - name: Unzip artifact if present (optional)
        run: |
          set -e
          if [ -f "${{ env.ARTIFACT_ZIP }}" ]; then
            unzip -o "${{ env.ARTIFACT_ZIP }}" -d "${{ env.ARTIFACT_DIR }}"
          else
            echo "ℹ️ No upstream artifact ZIP file found here."
          fi
          echo "---- artifact dir tree (after upstream) ----"
          (cd "${{ env.ARTIFACT_DIR }}" && /usr/bin/find . -maxdepth 3 -type f -printf "%p\t%k KB\n" || true)

      # ─────────────────────────────────────────────────────────────────────
      # 2) Release Fallback (latest release'tan varlık indir)
      # ─────────────────────────────────────────────────────────────────────
      - name: Fallback — Download from latest Release (optional)
        uses: robinraju/release-downloader@v1.10
        with:
          repository: ${{ github.repository }}
          latest: true
          fileName: ${{ env.RELEASE_ASSETS }}
          out-file-path: artifact/release
          extract: true
        continue-on-error: true

      - name: Show artifact/release trees
        run: |
          set -e
          echo "---- artifact dir tree (after release fallback) ----"
          /usr/bin/find artifact -maxdepth 3 -type f -printf "%p\t%k KB\n" | sort || true

      # ─────────────────────────────────────────────────────────────────────
      # 3) FR adımları (csv üretim zinciri)
      # ─────────────────────────────────────────────────────────────────────
      - name: FR 00) Base grid / event label merge
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_crime_fr.py
          echo "---- head(sf_crime_grid_full_labeled.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/sf_crime_grid_full_labeled.csv" || true

      - name: FR 01) 911
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_911_fr.py || true
          echo "---- head(fr_crime_01.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_01.csv" || true

      - name: FR 02) 311
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_311_fr.py || true
          echo "---- head(fr_crime_02.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_02.csv" || true

      - name: FR 03) Population
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_population_fr.py || true
          echo "---- head(fr_crime_03.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_03.csv" || true

      - name: FR 04) Bus
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_bus_fr.py || true
          echo "---- head(fr_crime_04.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_04.csv" || true

      - name: FR 05) Train
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_train_fr.py || true
          echo "---- head(fr_crime_05.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_05.csv" || true

      - name: FR 06) POI
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_poi_fr.py || true
          echo "---- head(fr_crime_06.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_06.csv" || true

      - name: FR 07) Police & Gov
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_police_gov_fr.py || true
          echo "---- head(fr_crime_07.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_07.csv" || true

      - name: FR 08) Weather
        env:
          ARTIFACT_ZIP: ${{ env.ARTIFACT_ZIP }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -e
          python -u update_weather_fr.py || true
          echo "---- head(fr_crime_08.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_08.csv" || true

      - name: FR 09) Neighbors
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
        run: |
          set -e
          if [ -f scripts/make_neighbors_fr.py ]; then
            PY=scripts/make_neighbors_fr.py
          elif [ -f make_neighbors_fr.py ]; then
            PY=make_neighbors_fr.py
          else
            echo "⚠️ make_neighbors_fr.py bulunamadı, adım atlanıyor."
            exit 0
          fi

          if [ ! -f "${CRIME_DATA_DIR}/fr_crime_08.csv" ]; then
            echo "⚠️ fr_crime_08.csv bulunamadı, neighbors adımı atlanıyor."
            exit 0
          fi

          python -u "$PY" || true
          echo "---- head(fr_crime_09.csv) ----"
          head -n 5 "${CRIME_DATA_DIR}/fr_crime_09.csv" || true

      - name: FR 10) Build fr_crime_10.parquet (script)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -e
          echo "PWD=$(pwd)"
          ls -lah
          echo "---- scripts/ ----"
          ls -lah scripts || true
          echo "---- data dir ----"
          ls -lah "${CRIME_DATA_DIR}" || true

          # script var mı?
          test -f scripts/make_fr_crime_10.py || { echo "❌ scripts/make_fr_crime_10.py yok!"; exit 1; }

          # girdi var mı?
          if [ ! -f "${CRIME_DATA_DIR}/fr_crime_09.parquet" ] && [ ! -f "${CRIME_DATA_DIR}/fr_crime_09.csv" ]; then
            echo "❌ fr_crime_09.(parquet|csv) bulunamadı. FR 09 adımını doğrulayın."
            exit 1
          fi

          python -u scripts/make_fr_crime_10.py
          echo "---- output ----"
          ls -lh "${CRIME_DATA_DIR}/fr_crime_10.parquet"

      # ─────────────────────────────────────────────────────────────────────
      # 4) Parquet -> CSV mirror (metrics_base_ohe, risk_hourly, fr_09, fr_10)
      # ─────────────────────────────────────────────────────────────────────
      - name: FR 10.5) Create CSV mirrors for key Parquet files
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail
          python - << 'PY'
import os, sys, pandas as pd
base = os.environ["CRIME_DATA_DIR"]
candidates = [
  "metrics_base_ohe.parquet",
  "risk_hourly.parquet",
  "fr_crime_09.parquet",
  "fr_crime_10.parquet",
]
for fname in candidates:
    p = os.path.join(base, fname)
    if os.path.exists(p):
        try:
            print(f"Converting to CSV: {p}")
            df = pd.read_parquet(p)
            out = os.path.join(base, os.path.splitext(fname)[0] + ".csv")
            # Çok büyük dosyalar için index=False; float biçimleri default
            df.to_csv(out, index=False)
            print("✅ Wrote", out, "rows=", len(df))
        except Exception as e:
            print("⚠️ CSV mirror failed for", p, "->", e, file=sys.stderr)
PY

      # ─────────────────────────────────────────────────────────────────────
      # 5) Paketleme (parquet + csv)
      # ─────────────────────────────────────────────────────────────────────
      - name: FR 11) Package minimal outputs (CSV & Parquet)
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          FR_OUTPUT_DIR: ${{ env.FR_OUTPUT_DIR }}
          FALLBACK_DIRS: ${{ env.FALLBACK_DIRS }}
        run: |
          set -euo pipefail

          echo "🔎 Aranacak dosyalar:"
          PARQ_LIST=("fr_crime_09.parquet" "fr_crime_10.parquet" "metrics_base_ohe.parquet" "risk_hourly.parquet")
          CSV_LIST=("fr_crime_09.csv" "fr_crime_10.csv" "metrics_base_ohe.csv" "risk_hourly.csv")

          # Arama dizinleri (öncelik sırası)
          IFS=',' read -r -a EXTRA_DIRS <<< "${FALLBACK_DIRS}"
          SEARCH_DIRS=("${CRIME_DATA_DIR}" "${ARTIFACT_DIR}" "${ARTIFACT_DIR}/artifact" "${FR_OUTPUT_DIR}")
          if [ -n "${GITHUB_WORKSPACE:-}" ] && [ -d "${GITHUB_WORKSPACE}" ]; then
            SEARCH_DIRS+=("${GITHUB_WORKSPACE}")
          fi
          for d in "${EXTRA_DIRS[@]}"; do
            if [ -n "$d" ] && [ -d "$d" ]; then SEARCH_DIRS+=("$d"); fi
          done

          mkdir -p "${CRIME_DATA_DIR}/_pkg_parquet" "${CRIME_DATA_DIR}/_pkg_csv"

          find_and_copy() {
            local fname="$1"; shift
            local outdir="$1"; shift
            for dir in "${SEARCH_DIRS[@]}"; do
              if [ -f "${dir}/${fname}" ]; then
                echo "✅ bulundu: ${dir}/${fname}"
                cp -f "${dir}/${fname}" "${outdir}/"
                return 0
              fi
              if [ -d "${dir}" ]; then
                hit="$(/usr/bin/find "${dir}" -type f -name "${fname}" -print -quit || true)"
                if [ -n "${hit}" ]; then
                  echo "✅ bulundu (derin): ${hit}"
                  cp -f "${hit}" "${outdir}/"
                  return 0
                fi
              fi
            done
            echo "⚠️ bulunamadı: ${fname}"
            return 1
          }

          echo "📦 Parquet dosyaları toplanıyor..."
          PARQ_FOUND=0
          for f in "${PARQ_LIST[@]}"; do
            if find_and_copy "${f}" "${CRIME_DATA_DIR}/_pkg_parquet"; then PARQ_FOUND=1; fi
          done
          if [ "${PARQ_FOUND}" -eq 0 ]; then
            echo "No parquet outputs were found in this run." > "${CRIME_DATA_DIR}/_pkg_parquet/README.txt"
          fi

          echo "🗂 CSV dosyaları toplanıyor (varsa)..."
          CSV_FOUND=0
          for f in "${CSV_LIST[@]}"; do
            if find_and_copy "${f}" "${CRIME_DATA_DIR}/_pkg_csv"; then CSV_FOUND=1; fi
          done
          if [ "${CSV_FOUND}" -eq 0 ]; then
            echo "No CSV outputs were found in this run." > "${CRIME_DATA_DIR}/_pkg_csv/README.txt"
          fi

          echo "🧩 Zip oluşturuluyor..."
          rm -f "${CRIME_DATA_DIR}/fr_parquet_outputs.zip" "${CRIME_DATA_DIR}/fr_csv_outputs.zip" || true
          (cd "${CRIME_DATA_DIR}/_pkg_parquet" && zip -r ../fr_parquet_outputs.zip . >/dev/null)
          (cd "${CRIME_DATA_DIR}/_pkg_csv"     && zip -r ../fr_csv_outputs.zip     . >/dev/null)

          echo "✅ Paketler hazır:"
          ls -lh "${CRIME_DATA_DIR}/fr_parquet_outputs.zip" || true
          ls -lh "${CRIME_DATA_DIR}/fr_csv_outputs.zip" || true

          # Zorunlu üçlü kontrolü (parquet tarafı)
          mandatory=0
          for f in fr_crime_09.parquet metrics_base_ohe.parquet risk_hourly.parquet; do
            if [ ! -f "${CRIME_DATA_DIR}/_pkg_parquet/$f" ]; then
              echo "❌ Zorunlu parquet eksik: $f"
              mandatory=1
            fi
          done
          if [ $mandatory -eq 1 ]; then
            echo "❌ Zorunlu parquetlerden en az biri yok. Paket üretildi ancak eksik."
            # Eksikte işi fail etmek istersen aç:
            # exit 1
          fi

      - name: Inspect packaged ZIP contents (debug)
        run: |
          set -e
          echo "---- unzip -l (parquet) ----"
          if [ -f "${{ env.CRIME_DATA_DIR }}/fr_parquet_outputs.zip" ]; then
            unzip -l "${{ env.CRIME_DATA_DIR }}/fr_parquet_outputs.zip" || true
          else
            echo "⚠️ fr_parquet_outputs.zip yok!"
          fi
          echo "---- unzip -l (csv) ----"
          if [ -f "${{ env.CRIME_DATA_DIR }}/fr_csv_outputs.zip" ]; then
            unzip -l "${{ env.CRIME_DATA_DIR }}/fr_csv_outputs.zip" || true
          else
            echo "⚠️ fr_csv_outputs.zip yok!"
          fi

      - name: Tree (workspace & data) for diagnostics
        run: |
          set -e
          echo "---- PWD & workspace ----"
          echo "PWD=$(pwd)"
          /usr/bin/find . -maxdepth 2 -type d -printf "%p\n" | sort
          echo "---- crime_prediction_data ----"
          /usr/bin/find "${{ env.CRIME_DATA_DIR }}" -maxdepth 3 -type f -printf "%p\t%k KB\n" | sort || true
          echo "---- artifact ----"
          /usr/bin/find artifact -maxdepth 3 -type f -printf "%p\t%k KB\n" | sort || true

      - name: Upload FR pipeline outputs (CSV ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: fr-crime-outputs-csv
          path: ${{ env.CRIME_DATA_DIR }}/fr_csv_outputs.zip
          if-no-files-found: error
          retention-days: 14

      - name: Upload FR pipeline outputs (Parquet ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: fr-crime-outputs-parquet
          path: ${{ env.CRIME_DATA_DIR }}/fr_parquet_outputs.zip
          if-no-files-found: error
          retention-days: 14

      - name: Publish job summary
        env:
          CRIME_DATA_DIR: ${{ env.CRIME_DATA_DIR }}
        run: |
          set -euo pipefail

          # Boyut bilgileri
          PARQ_ZIP_SIZE="-"
          CSV_ZIP_SIZE="-"
          if [ -f "${CRIME_DATA_DIR}/fr_parquet_outputs.zip" ]; then
            PARQ_ZIP_SIZE="$(du -h "${CRIME_DATA_DIR}/fr_parquet_outputs.zip" | awk '{print $1}')"
          fi
          if [ -f "${CRIME_DATA_DIR}/fr_csv_outputs.zip" ]; then
            CSV_ZIP_SIZE="$(du -h "${CRIME_DATA_DIR}/fr_csv_outputs.zip" | awk '{print $1}')"
          fi

          # Zorunlu üçlü kontrolü (parquet)
          MISSING=()
          for f in fr_crime_09.parquet metrics_base_ohe.parquet risk_hourly.parquet; do
            if [ ! -f "${CRIME_DATA_DIR}/_pkg_parquet/$f" ]; then
              MISSING+=("$f")
            fi
          done

          echo "## Post Processing (FR) — Özet" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Çalışma zamanı:** \`$(date -u +"%Y-%m-%d %H:%M:%S") UTC\`" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Üretilen Paketler" >> "$GITHUB_STEP_SUMMARY"
          echo "- **fr_parquet_outputs.zip**: ${PARQ_ZIP_SIZE}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **fr_csv_outputs.zip**: ${CSV_ZIP_SIZE}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ "${#MISSING[@]}" -gt 0 ]; then
            echo "### Uyarı: Zorunlu Parquet Eksikleri" >> "$GITHUB_STEP_SUMMARY"
            for f in "${MISSING[@]}"; do
              echo "- ❌ ${f}" >> "$GITHUB_STEP_SUMMARY"
            done
            echo "" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "### Zorunlu Parquet Kontrolü" >> "$GITHUB_STEP_SUMMARY"
            echo "- ✅ \`fr_crime_09.parquet\`, \`metrics_base_ohe.parquet\`, \`risk_hourly.parquet\` bulundu." >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "### İçerik Listeleri" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "${CRIME_DATA_DIR}/fr_parquet_outputs.zip" ]; then
            echo "<details><summary>fr_parquet_outputs.zip içeriği</summary>" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            unzip -l "${CRIME_DATA_DIR}/fr_parquet_outputs.zip" | sed 's/^/    /' >> "$GITHUB_STEP_SUMMARY" || true
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "</details>" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -f "${CRIME_DATA_DIR}/fr_csv_outputs.zip" ]; then
            echo "<details><summary>fr_csv_outputs.zip içeriği</summary>" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            unzip -l "${CRIME_DATA_DIR}/fr_csv_outputs.zip" | sed 's/^/    /' >> "$GITHUB_STEP_SUMMARY" || true
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "</details>" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "> Not: Bu iş akışı, **Full SF Crime Pipeline** tamamlandığında tetiklenir. Upstream artifact’tan okur; gerekirse **latest release** fallback’ı dener; ardından FR minimal çıktıları (parquet+csv) paketler ve artifact olarak yükler." >> "$GITHUB_STEP_SUMMARY"
